
==================== FINAL INTERFACE ====================
2017-01-08 01:32:35.909335397 UTC

interface xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv:XMonad.My.Commands 8001
  interface hash: d96bbeedfe835d82c4eecf6a3d9f1489
  ABI hash: 7f938da6e0a1c6ef8641b41501e4845b
  export-list hash: e359ebeda1aa981e7c8bc0151d9fa46f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4a75c4e57dd2ac4b9cd7e9d030ab3862
  sig of: Nothing
  used TH splices: False
  where
exports:
  XMonad.My.Commands.commands
module dependencies: XMonad.My.Helpers XMonad.My.Theme
                     XMonad.Util.XResources
package dependencies: X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL
                      X11-xft-0.3.1@X11-xft-0.3.1-K5aCxhr7PdkBJ0izTORldG
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-0.7.1.1@data-default-0.7.1.1-5uix4eIzBY9IcVb4V2HbW3
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-FYQpjIylblBDctdkHAFeXA
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      extensible-exceptions-0.1.1.4@extensible-exceptions-0.1.1.4-3h0ykvvAO915cRhUyj3rRV
                      filepath-1.4.1.0@filepath-1.4.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      process-1.4.2.0@process-1.4.2.0
                      setlocale-1.0.0.4@setlocale-1.0.0.4-EUtO5CfNQTBH7QTFQEDDaI
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI
                      xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84:Data.Default.Instances.OldLocale
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Config
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Enum fdf7ac3e1b0be0a4a37257601bddad14
import  -/  base-4.9.0.0:GHC.IO.Exception 6616e78328d3d532254cd5e593c9c639
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad b456b70eb07734470cc1ac0ec218c4da
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Core 914c546ed1a79c78146a872883560c01
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Layout 8814b906c6bb7fdbcc4a6f9434354388
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Operations 61aad49a4ce0a738cfcad6fefc5578c5
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.StackSet 324f0b7b5a144f5b8d7a533a68d8e72d
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.ManageDocks 146352bec7f40335722c16e6f54069eb
import  -/  XMonad.My.Helpers 9ababd7c5a43ad4f8ace5924095d5f33
  exports: 335baffbbb24801c8a2829ffa0fb0425
  runLogHook 98df4f49fb4a763515f1acab44686906
e3a6765e0e64d7ddea777d3d80ad1ccb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   XMonad.My.Commands.$trModule2
                   XMonad.My.Commands.$trModule1) -}
c9a7b3f9fb2733cdd535614b7a971ea3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMonad.My.Commands"#) -}
79369a08232ec35777616ff4b3a626a1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv"#) -}
2f85ce9f028cfb6392a088160072f005
  $w$sgo10 ::
    GHC.Prim.Word#
    -> Data.Map.Base.Map Graphics.X11.Types.Window a1
    -> Data.Map.Base.Map Graphics.X11.Types.Window a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ac45a34e6e0341e0f5cf046586ea55f4
  commands :: XMonad.Core.X [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Commands.commands1
                  `cast`
                (Trans
                     (<XMonad.Core.XConf>_R
                      ->_R Trans
                               (<XMonad.Core.XState>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <([(GHC.Base.String, XMonad.Core.X ())],
                                                XMonad.Core.XState)>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <XMonad.Core.XState>_N
                                         <GHC.Types.IO>_R
                                         <[(GHC.Base.String, XMonad.Core.X ())]>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <XMonad.Core.XConf>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       XMonad.Core.XState GHC.Types.IO>_R
                                    <[(GHC.Base.String, XMonad.Core.X ())]>_N))
                          (Sym (XMonad.Core.N:X[0]) <[(GHC.Base.String,
                                                       XMonad.Core.X ())]>_N))) -}
6e0c0739a39ce78596117e1caeb95f81
  commands1 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([(GHC.Base.String, XMonad.Core.X ())], XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (r1 :: XMonad.Core.XConf)
                   (eta :: XMonad.Core.XState)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta1,
                    (case r1 of wild { XMonad.Core.XConf ds5 dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 ds6 ds7 ds8 ds9 ds10 ->
                     GHC.Base.++
                       @ (GHC.Base.String, XMonad.Core.X ())
                       (XMonad.My.Commands.commands_go dt6)
                       XMonad.My.Commands.commands2 },
                     eta) #)) -}
de38f9703860dc65c6684e8c08212018
  commands10 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands67
                   XMonad.My.Commands.commands11) -}
e78c2497051e687cf3618fb818db3e7e
  commands11 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands65
                   XMonad.My.Commands.commands12) -}
c771239fdb5fcaf720e9b3d6f3dfcbe0
  commands12 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands63
                   XMonad.My.Commands.commands13) -}
57e707981f77595bcbc19079dc29df7a
  commands13 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands60
                   XMonad.My.Commands.commands14) -}
d05af33840c5bde293b3a0c5efd51362
  commands14 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands57
                   XMonad.My.Commands.commands15) -}
c15979081d1a69481dfb447cb4ce8b47
  commands15 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands54
                   XMonad.My.Commands.commands16) -}
275b513002df11da3e55e0fcb25a0a5e
  commands16 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands51
                   XMonad.My.Commands.commands17) -}
7b5fbd8d34f795ec7fe7bba2e9a0cd94
  commands17 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands48
                   XMonad.My.Commands.commands18) -}
0cdef133e6ae572cae38d452fad1d7f7
  commands18 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands45
                   XMonad.My.Commands.commands19) -}
ed6121734f66d2cf1f2012b718a4667d
  commands19 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands42
                   XMonad.My.Commands.commands20) -}
ee351a83d6ffe939a8e8b5829065fa55
  commands2 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (XMonad.My.Commands.commands89
                   XMonad.My.Commands.commands90
                   XMonad.My.Commands.commands3) -}
f485a0944bdea09668bd72c445ec0479
  commands20 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands39
                   XMonad.My.Commands.commands21) -}
35364d4f6271111f2a9ac7abd1b36c27
  commands21 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands37
                   XMonad.My.Commands.commands22) -}
bf69c27ec46f13410e960592bbd1400e
  commands22 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands34
                   XMonad.My.Commands.commands23) -}
1373bfd18ea6398e09d07cdb8d8f26b7
  commands23 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands30
                   XMonad.My.Commands.commands24) -}
80de6d3dbadec241a43567470f57347e
  commands24 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands25
                   (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ()))) -}
281c29eb022f724d8d258bca653c9504
  commands25 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands29,
                  XMonad.My.Commands.commands26
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
4ff00b6ada4d89e2795428da71ffedea
  commands26 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Hooks.ManageDocks.SetStruts
                   XMonad.Hooks.ManageDocks.$fMessageSetStruts1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Hooks.ManageDocks.SetStruts>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Hooks.ManageDocks.SetStruts>_N))
                   XMonad.My.Commands.commands27) -}
d02e917c5036a96a8522afe9653a2c85
  commands27 :: XMonad.Hooks.ManageDocks.SetStruts
  {- Unfolding: (XMonad.Hooks.ManageDocks.SetStruts
                   XMonad.My.Commands.commands28
                   (GHC.Types.[] @ XMonad.Util.Types.Direction2D)) -}
e37d62b5b3725fced2289b2f687cce1a
  commands28 :: [XMonad.Util.Types.Direction2D]
  {- Unfolding: (XMonad.Util.Types.$fEnumDirection2D_go 0#) -}
d4ee2b17c6984dfe1e2c1401ad374912
  commands29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "set-struts"#) -}
123b4f714165cd7cd3fde2b502fa4ff6
  commands3 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (XMonad.My.Commands.commands89
                   XMonad.My.Commands.commands88
                   XMonad.My.Commands.commands4) -}
2fc565c7956f6e802ea7c264b96ca3d0
  commands30 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands33,
                  XMonad.My.Commands.commands31
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
38a302456f3956c1688698d22eb7ecd3
  commands31 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Hooks.ManageDocks.SetStruts
                   XMonad.Hooks.ManageDocks.$fMessageSetStruts1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Hooks.ManageDocks.SetStruts>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Hooks.ManageDocks.SetStruts>_N))
                   XMonad.My.Commands.commands32) -}
bad7f8ab728a6b608b5b5761e1e2e6cc
  commands32 :: XMonad.Hooks.ManageDocks.SetStruts
  {- Unfolding: (XMonad.Hooks.ManageDocks.SetStruts
                   (GHC.Types.[] @ XMonad.Util.Types.Direction2D)
                   XMonad.My.Commands.commands28) -}
88fe98515ac4235600e854eb06e65951
  commands33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unset-struts"#) -}
35582e15cf2a82e49e9b3fa219e7f3e4
  commands34 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands36,
                  XMonad.My.Commands.commands35
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
92b83bc7c3690497e8367769e7b616b8
  commands35 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Hooks.ManageDocks.ToggleStruts
                   XMonad.Hooks.ManageDocks.$fMessageToggleStruts1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Hooks.ManageDocks.ToggleStruts>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Hooks.ManageDocks.ToggleStruts>_N))
                   XMonad.Hooks.ManageDocks.ToggleStruts) -}
1bed434e1b557e2c93bd98def364c6b6
  commands36 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "toggle-struts"#) -}
35cd1b20d2994421e8f0116990b298ab
  commands37 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands38,
                  XMonad.My.Helpers.runLogHook1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
0a0e1eb83e3d8f5f604bd3aa15eb34b6
  commands38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "refresh-panel"#) -}
afd5cf77dceecb6503b864a6862253b5
  commands39 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands41,
                  XMonad.My.Commands.commands40
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
272e57f987210d35f30b422078b30fd5
  commands4 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands85
                   XMonad.My.Commands.commands5) -}
46703331a41e55d0738e603c3049041b
  commands40 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>x -}
b10c2bb5ef96f5c9d0bc84542f1378ba
  commands41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "quit-wm"#) -}
bf7131cdc5a4cd0e1803bb9263a4976d
  commands42 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands44,
                  XMonad.My.Commands.commands43
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
5575d90815ccff48f37b797b53bce2c7
  commands43 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (r1 :: XMonad.Core.XConf)
                   (eta1 :: XMonad.Core.XState)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta1 of wild { XMonad.Core.XState dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 ds4 ds5 ds6 dt9 ds7 ->
                 case dt3 of wild1 {
                   GHC.Base.Nothing -> (# eta2, (GHC.Tuple.(), wild) #)
                   GHC.Base.Just x
                   -> case r1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                      XMonad.Operations.$wwindows
                        (\ (s1 :: XMonad.StackSet.StackSet
                                    XMonad.Core.WorkspaceId
                                    (XMonad.Core.Layout Graphics.X11.Types.Window)
                                    Graphics.X11.Types.Window
                                    XMonad.Core.ScreenId
                                    XMonad.Core.ScreenDetail)[OneShot] ->
                         case s1 of wild2 { XMonad.StackSet.StackSet dt dt11 dt12 dt13 dt14 ds ds1 ds2 ->
                         XMonad.StackSet.StackSet
                           @ XMonad.Core.WorkspaceId
                           @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                           @ Graphics.X11.Types.Window
                           @ XMonad.Core.ScreenId
                           @ XMonad.Core.ScreenDetail
                           dt
                           dt11
                           dt12
                           dt13
                           dt14
                           ds
                           ds1
                           (case x of wild3 { XMonad.StackSet.Stack ds3 ds11 ds12 ->
                            case ds3 of ww29 { GHC.Word.W64# ww30 ->
                            XMonad.My.Commands.$w$sgo10
                              @ XMonad.StackSet.RationalRect
                              ww30
                              ds2 } }) })
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19
                        ww20
                        ww21
                        ww22
                        ww23
                        ww24
                        ww25
                        ww26
                        ww27
                        dt1
                        dt2
                        wild1
                        dt4
                        dt5
                        dt6
                        dt7
                        dt8
                        ds4
                        ds5
                        ds6
                        dt9
                        ds7
                        eta2 } } }) -}
b768f02a9c698eb5c402583a8642e905
  commands44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sink"#) -}
b2cb0ae512a939f3a5ff1202aba57165
  commands45 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands47,
                  XMonad.My.Commands.commands46
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
c5807f5b60437c0eb2a39521fffcaeed
  commands46 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (r1 :: XMonad.Core.XConf)
                   (eta1 :: XMonad.Core.XState)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta1 of wild { XMonad.Core.XState dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 ds4 ds5 ds6 dt9 ds7 ->
                 case dt3 of wild1 {
                   GHC.Base.Nothing -> (# eta2, (GHC.Tuple.(), wild) #)
                   GHC.Base.Just x
                   -> XMonad.Operations.float1
                        (case x of wild2 { XMonad.StackSet.Stack ds3 ds1 ds2 -> ds3 })
                        r1
                        wild
                        eta2 } }) -}
7aa58cad4ac8a97fc48d6ca00db73e1c
  commands47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "float"#) -}
e23eaa441d9f879593054136bbfb04b7
  commands48 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands50,
                  XMonad.My.Commands.commands49
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
e6c4affd05288cc184693e3b238362d7
  commands49 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.swapMaster
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
56b97357e8f09ed7f8f6ad96ee28d38b
  commands5 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands82
                   XMonad.My.Commands.commands6) -}
a0442f876fac9ceb523360691e943ed5
  commands50 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "swap-master"#) -}
f38fea5247fa16d56eae9f92efb43dd9
  commands51 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands53,
                  XMonad.My.Commands.commands52
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
ddc7399547e08977dadd03ccef238459
  commands52 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.swapDown
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
308ee845f671f2b0c2019002b77ae00d
  commands53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "swap-down"#) -}
c8767313a04be391a33d006a65ac154a
  commands54 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands56,
                  XMonad.My.Commands.commands55
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
9137a3845f3e0ef3ba4deaa7a6227a90
  commands55 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.swapUp
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
009cb2ad89824c6bc50447653e9ae6da
  commands56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "swap-up"#) -}
7358d507b7d482ca3210a0ccc3b1f201
  commands57 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands59,
                  XMonad.My.Commands.commands58
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
b68b279c1d161efc72773a79dba9d15c
  commands58 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.focusDown
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
d55b036afb1f94633e660cd9096852b2
  commands59 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "focus-down"#) -}
c423754201b6f964282bca0e0a5aae65
  commands6 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands79
                   XMonad.My.Commands.commands7) -}
a776d0c91efe37a5caa0f924b67fd7e4
  commands60 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands62,
                  XMonad.My.Commands.commands61
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
5aecdf629b363c1d273134ebb8398066
  commands61 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.focusUp
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
95ea4b26b24c5148b6b100c98a704018
  commands62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "focus-up"#) -}
3f6f8f4cf436910aa95029db3b3ace09
  commands63 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands64,
                  XMonad.Operations.rescreen1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
680d62c5ea762dcc5d987779fd949b2e
  commands64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rescreen"#) -}
38b95ad415993162121989c8034100c9
  commands65 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands66,
                  XMonad.Operations.refresh1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
02408f487a9c3deee7f35f609162ac8e
  commands66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "refresh"#) -}
63dd828717dcd053c25557064154d607
  commands67 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands68,
                  XMonad.Operations.kill1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
012d0ec7cb83153ee0a65d959f08da89
  commands68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "kill"#) -}
e4c7725098928f5e2cc0661c38f52ca8
  commands69 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands72,
                  XMonad.My.Commands.commands70
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
14819ac64fe066f9c404765c67ad85ea
  commands7 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands76
                   XMonad.My.Commands.commands8) -}
d4501983c1d14c7593b78764826c8877
  commands70 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.restart1
                   XMonad.My.Commands.commands71
                   GHC.Types.False) -}
fcaf22f9e0b4cc8c1f00060c76fac38e
  commands71 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xmonad"#) -}
5faf1627ddfb32840f1c04bdc3610868
  commands72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "restart-wm-no-resume"#) -}
b3f03ede0d321a2b652637dc76870aaf
  commands73 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands75,
                  XMonad.My.Commands.commands74
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
a1ab830a92bde8ab4354937fd5b513a7
  commands74 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.restart1
                   XMonad.My.Commands.commands71
                   GHC.Types.True) -}
053211f30aeda58360374b959d8247f2
  commands75 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "restart-wm"#) -}
6d5801f7e1a55b118ebfd53742b3ce4f
  commands76 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands78,
                  XMonad.My.Commands.commands77
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
9f233ec19819f913ba4fe0d00394fab1
  commands77 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (\ (r1 :: XMonad.Core.XConf)
                   (eta :: XMonad.Core.XState)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta of ww { XMonad.Core.XState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 XMonad.Operations.$wsetLayout
                   (case r1 of wild { XMonad.Core.XConf ds5 dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 ds6 ds7 ds8 ds9 ds10 ->
                    dt3 })
                   r1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   eta1 }) -}
d510d5a1dd2a7cc5a25643264b5f9534
  commands78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "default-layout"#) -}
a5aa8cc97ecd838b267f57442ba5b7e4
  commands79 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands81,
                  XMonad.My.Commands.commands80
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
08ac2db938c9bb208e789d946185b282
  commands8 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands73
                   XMonad.My.Commands.commands9) -}
f8ad22da56eb95041f0e6fbeeba1cc5e
  commands80 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.ChangeLayout
                   XMonad.Layout.$fMessageChangeLayout1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.ChangeLayout>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.ChangeLayout>_N))
                   XMonad.Layout.NextLayout) -}
c3b1a0cced16eabe9aa15312ebafe9fa
  commands81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "next-layout"#) -}
47b32af5fed5bcd383a7ec8ae6341fe1
  commands82 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands84,
                  XMonad.My.Commands.commands83
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
6060fc9267e73028364e8796e92c4987
  commands83 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.Resize
                   XMonad.Layout.$fMessageResize1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.Resize>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.Resize>_N))
                   XMonad.Layout.Expand) -}
e5b29173b66713b5fae8b9d1b29c959f
  commands84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "expand"#) -}
d3e919cbdb3598c9a864b30fbc575792
  commands85 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Unfolding: ((XMonad.My.Commands.commands87,
                  XMonad.My.Commands.commands86
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
088abd4b4ac573bbeb7fe450e7e0fdd2
  commands86 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.Resize
                   XMonad.Layout.$fMessageResize1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.Resize>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.Resize>_N))
                   XMonad.Layout.Shrink) -}
26a4ccf7808376aa8b69eb12e828b3ec
  commands87 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shrink"#) -}
968e15df391b2a7fa61b37dcd3fa7a98
  commands88 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
5e59f82ab4b2b0134cab70f4d64ccb0d
  commands89 ::
    GHC.Types.Int
    -> [(GHC.Base.String, XMonad.Core.X ())]
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 2, Strictness: <L,U(U)><L,U> -}
4de8045b3f76115b1d73da652461bb15
  commands9 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Commands.commands69
                   XMonad.My.Commands.commands10) -}
a32e89dcae93c810f7e101c84b39fe1a
  commands90 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
12ffd8cf0d56df9d427329a840179d47
  commands_go ::
    [GHC.Base.String] -> [([GHC.Types.Char], XMonad.Core.X ())]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

