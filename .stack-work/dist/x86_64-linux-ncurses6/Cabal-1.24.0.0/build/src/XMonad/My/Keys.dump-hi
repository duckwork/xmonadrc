
==================== FINAL INTERFACE ====================
2017-01-08 01:39:33.709669891 UTC

interface xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv:XMonad.My.Keys 8001
  interface hash: d302b4f035b5dcf6297fa97f69e56eb0
  ABI hash: 7511ae0d39cced3a771f64f1fcdfcffa
  export-list hash: 3d12c4669d9e0d39eec25edf519f1bbf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4a75c4e57dd2ac4b9cd7e9d030ab3862
  sig of: Nothing
  used TH splices: False
  where
exports:
  XMonad.My.Keys.keys
  XMonad.My.Keys.mouseBindings
  XMonad.My.Keys.rawKeys
module dependencies: XMonad.Hooks.ToggleFade XMonad.My.Commands
                     XMonad.My.Helpers XMonad.My.Theme XMonad.Util.XResources
package dependencies: X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL
                      X11-xft-0.3.1@X11-xft-0.3.1-K5aCxhr7PdkBJ0izTORldG
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-0.7.1.1@data-default-0.7.1.1-5uix4eIzBY9IcVb4V2HbW3
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-FYQpjIylblBDctdkHAFeXA
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      extensible-exceptions-0.1.1.4@extensible-exceptions-0.1.1.4-3h0ykvvAO915cRhUyj3rRV
                      filepath-1.4.1.0@filepath-1.4.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      process-1.4.2.0@process-1.4.2.0
                      setlocale-1.0.0.4@setlocale-1.0.0.4-EUtO5CfNQTBH7QTFQEDDaI
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI
                      xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84:Data.Default.Instances.OldLocale
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Config
         xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.NamedActions
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Types ceac75734ca8d1542c4af611b44f8f92
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.IO.Exception 6616e78328d3d532254cd5e593c9c639
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad b456b70eb07734470cc1ac0ec218c4da
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Core 914c546ed1a79c78146a872883560c01
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Layout 8814b906c6bb7fdbcc4a6f9434354388
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Operations 61aad49a4ce0a738cfcad6fefc5578c5
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.StackSet 324f0b7b5a144f5b8d7a533a68d8e72d
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.Commands 612d3f770b75d9e4553e630bf42e1046
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.CycleWS 059eb91b8096e99a73130dcd25f83a4a
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.DynamicWorkspaceOrder 110ccf5ff64f10be0b0c753a8a4a490e
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.DynamicWorkspaces cd8dd01c6da71ce0a2005225249d707c
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.FlexibleResize 7704edb000854d9067583624f168afc4
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.GroupNavigation 6057851573924919ae79aa898567fbc7
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.Promote 695a88669edf7400903d2e793007738b
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Layout.MouseResizableTile 9465f476bb5c46693a364f17b64bc424
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Layout.MultiToggle 60b673adf1725bfa59d245769cb12d70
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Layout.MultiToggle.Instances 51a350bfc646d697a239aeece567feda
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Layout.ToggleLayouts e6ea7a027385f177514a03a79858341a
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.EZConfig ca816dba42b37405c9c53382f273698a
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.Types 201865d8aacb778c29225a12df4ced84
import  -/  XMonad.Hooks.ToggleFade 067315808740ada1c752c88a6c41f0f3
  exports: 96db371ccb91a3332a2d88544478819b
  toggleFade c264afaca5280f7441aa7479ecc4b848
import  -/  XMonad.My.Commands 7f938da6e0a1c6ef8641b41501e4845b
  exports: e359ebeda1aa981e7c8bc0151d9fa46f
  commands ac45a34e6e0341e0f5cf046586ea55f4
import  -/  XMonad.My.Helpers 9ababd7c5a43ad4f8ace5924095d5f33
  exports: 335baffbbb24801c8a2829ffa0fb0425
  runLogHook 98df4f49fb4a763515f1acab44686906
  toggleFloat 3ffb7ba2c9cc2bd49718d9119982a7c4
178535eaa223f3502818dd7c4f79852c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   XMonad.My.Keys.$trModule2
                   XMonad.My.Keys.$trModule1) -}
925e2f069d453df12a8520ba7ce84129
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMonad.My.Keys"#) -}
581237099cf5aeedafeea7248ece2bad
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv"#) -}
48744c1e8a09b0540c508a60d7fdc7ab
  $wlvl ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> (# (GHC.Base.String, XMonad.Core.X ()),
          [(GHC.Base.String, XMonad.Core.X ())] #)
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 (# XMonad.My.Keys.rawKeys147,
                    GHC.Types.:
                      @ (GHC.Base.String, XMonad.Core.X ())
                      (XMonad.My.Keys.rawKeys146,
                       let {
                         w1 :: XMonad.Core.Layout Graphics.X11.Types.Window
                         = case w of wild { XMonad.Core.XConfig ds5 ds6 ds7 ds8 ds9 ds10 ds11 dt ds12 ds13 dt1 ds14 ds15 ds16 ds17 dt2 dt3 ds18 ->
                           ds8 }
                       } in
                       (\ (w2 :: XMonad.Core.XConf)
                          (w3 :: XMonad.Core.XState)
                          (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case w3 of ww { XMonad.Core.XState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                        XMonad.Operations.$wsetLayout
                          w1
                          w2
                          ww1
                          ww2
                          ww3
                          ww4
                          ww5
                          ww6
                          ww7
                          ww8
                          ww9
                          ww10
                          ww11
                          ww12
                          ww13
                          w4 })
                         `cast`
                       (Trans
                            (<XMonad.Core.XConf>_R
                             ->_R Trans
                                      (<XMonad.Core.XState>_R
                                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                            (Trans
                                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                           <*>_N
                                           <XMonad.Core.XConf>_R
                                           <Control.Monad.Trans.State.Lazy.StateT
                                              XMonad.Core.XState GHC.Types.IO>_R
                                           <()>_N))
                                 (Sym (XMonad.Core.N:X[0]) <()>_N))))
                      XMonad.My.Keys.rawKeys91 #)) -}
11a90d090a7e18bfb79bfc46c60bc55c
  $wlvl1 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> (# (GHC.Base.String, XMonad.Core.X ()),
          [(GHC.Base.String, XMonad.Core.X ())] #)
  {- Arity: 1,
     Strictness: <L,1*U(A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 (# XMonad.My.Keys.rawKeys152,
                    GHC.Types.:
                      @ (GHC.Base.String, XMonad.Core.X ())
                      (XMonad.My.Keys.rawKeys151,
                       let {
                         m1 :: XMonad.Core.X System.Posix.Types.ProcessID
                         = XMonad.Core.xfork
                             @ XMonad.Core.X
                             XMonad.Core.$fMonadIOX
                             (System.Posix.Process.executeFile1
                                @ ()
                                XMonad.Core.spawnPID2
                                GHC.Types.False
                                (GHC.Types.:
                                   @ GHC.Base.String
                                   XMonad.Core.spawnPID1
                                   (GHC.Types.:
                                      @ GHC.Base.String
                                      (XMonad.Core.terminal @ XMonad.Core.Layout w)
                                      (GHC.Types.[] @ GHC.Base.String)))
                                (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)]))
                               `cast`
                             (Sym (GHC.Types.N:IO[0] <()>_R))
                       } in
                       (\ (r1 :: XMonad.Core.XConf) ->
                        let {
                          m2 :: Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                          = m1
                              `cast`
                            (Trans
                                 (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <System.Posix.Types.ProcessID>_N))
                              r1
                        } in
                        (\ (s1 :: XMonad.Core.XState)
                           (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case (m2
                                 `cast`
                               (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                    <XMonad.Core.XState>_N
                                    <GHC.Types.IO>_R
                                    <System.Posix.Types.ProcessID>_N)
                                 s1)
                                `cast`
                              (GHC.Types.N:IO[0]
                                   <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                                s of ds1 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                          `cast`
                        (Trans
                             (<XMonad.Core.XState>_R
                              ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                             (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                       <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N))))
                         `cast`
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N)))
                      (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ())) #)) -}
42426f163b8f3e063aa484e711f2b88b
  $wlvl2 ::
    Graphics.X11.Types.Window
    -> Graphics.X11.Xlib.Types.Display
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> XMonad.Core.Layout Graphics.X11.Types.Window
    -> XMonad.Core.ManageHook
    -> (Graphics.X11.Xlib.Extras.Event
        -> XMonad.Core.X Data.Monoid.All)
    -> [GHC.Base.String]
    -> GHC.Prim.Word#
    -> (XMonad.Core.XConfig XMonad.Core.Layout
        -> Data.Map.Base.Map
             (Graphics.X11.Types.ButtonMask, Graphics.X11.Types.KeySym)
             (XMonad.Core.X ()))
    -> (XMonad.Core.XConfig XMonad.Core.Layout
        -> Data.Map.Base.Map
             (Graphics.X11.Types.ButtonMask, Graphics.X11.Types.Button)
             (Graphics.X11.Types.Window -> XMonad.Core.X ()))
    -> GHC.Prim.Word#
    -> XMonad.Core.X ()
    -> XMonad.Core.X ()
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> ([GHC.Base.String]
        -> XMonad.Core.XConfig XMonad.Core.Layout
        -> GHC.Types.IO (XMonad.Core.XConfig XMonad.Core.Layout))
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
         (XMonad.Core.X ())
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button)
         (Graphics.X11.Types.Window -> XMonad.Core.X ())
    -> GHC.Types.Bool
    -> GHC.Base.Maybe
         (Graphics.X11.Xlib.Types.Position,
          Graphics.X11.Xlib.Types.Position)
    -> GHC.Base.Maybe Graphics.X11.Xlib.Extras.Event
    -> XMonad.Core.WorkspaceId
    -> XMonad.Core.Layout Graphics.X11.Types.Window
    -> GHC.Base.Maybe (XMonad.StackSet.Stack Graphics.X11.Types.Window)
    -> XMonad.Core.ScreenId
    -> XMonad.Core.ScreenDetail
    -> [XMonad.StackSet.Screen
          XMonad.Core.WorkspaceId
          (XMonad.Core.Layout Graphics.X11.Types.Window)
          Graphics.X11.Types.Window
          XMonad.Core.ScreenId
          XMonad.Core.ScreenDetail]
    -> [XMonad.StackSet.Workspace
          XMonad.Core.WorkspaceId
          (XMonad.Core.Layout Graphics.X11.Types.Window)
          Graphics.X11.Types.Window]
    -> Data.Map.Base.Map
         Graphics.X11.Types.Window XMonad.StackSet.RationalRect
    -> Data.Set.Base.Set Graphics.X11.Types.Window
    -> Data.Map.Base.Map Graphics.X11.Types.Window GHC.Types.Int
    -> GHC.Base.Maybe
         (Graphics.X11.Xlib.Types.Position
          -> Graphics.X11.Xlib.Types.Position -> XMonad.Core.X (),
          XMonad.Core.X ())
    -> GHC.Prim.Word#
    -> Data.Map.Base.Map
         GHC.Base.String
         (Data.Either.Either GHC.Base.String XMonad.Core.StateExtension)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 42,
     Strictness: <L,U><L,U(U)><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><S,U><L,U><L,U><S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Graphics.X11.Types.Window)
                   (ww :: Graphics.X11.Xlib.Types.Display)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: XMonad.Core.Layout Graphics.X11.Types.Window)
                   (ww5 :: XMonad.Core.ManageHook)
                   (ww6 :: Graphics.X11.Xlib.Extras.Event
                           -> XMonad.Core.X Data.Monoid.All)
                   (ww7 :: [GHC.Base.String])
                   (ww8 :: GHC.Prim.Word#)
                   (ww9 :: XMonad.Core.XConfig XMonad.Core.Layout
                           -> Data.Map.Base.Map
                                (Graphics.X11.Types.ButtonMask, Graphics.X11.Types.KeySym)
                                (XMonad.Core.X ()))
                   (ww10 :: XMonad.Core.XConfig XMonad.Core.Layout
                            -> Data.Map.Base.Map
                                 (Graphics.X11.Types.ButtonMask, Graphics.X11.Types.Button)
                                 (Graphics.X11.Types.Window -> XMonad.Core.X ()))
                   (ww11 :: GHC.Prim.Word#)
                   (ww12 :: XMonad.Core.X ())
                   (ww13 :: XMonad.Core.X ())
                   (ww14 :: GHC.Types.Bool)
                   (ww15 :: GHC.Types.Bool)
                   (ww16 :: GHC.Prim.Word#)
                   (ww17 :: GHC.Prim.Word#)
                   (ww18 :: [GHC.Base.String]
                            -> XMonad.Core.XConfig XMonad.Core.Layout
                            -> GHC.Types.IO (XMonad.Core.XConfig XMonad.Core.Layout))
                   (ww19 :: GHC.Prim.Word#)
                   (ww20 :: GHC.Prim.Word#)
                   (ww21 :: GHC.Prim.Word#)
                   (ww22 :: Data.Map.Base.Map
                              (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
                              (XMonad.Core.X ()))
                   (ww23 :: Data.Map.Base.Map
                              (Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button)
                              (Graphics.X11.Types.Window -> XMonad.Core.X ()))
                   (ww24 :: GHC.Types.Bool)
                   (ww25 :: GHC.Base.Maybe
                              (Graphics.X11.Xlib.Types.Position,
                               Graphics.X11.Xlib.Types.Position))
                   (ww26 :: GHC.Base.Maybe Graphics.X11.Xlib.Extras.Event)
                   (ww27 :: XMonad.Core.WorkspaceId)
                   (ww28 :: XMonad.Core.Layout Graphics.X11.Types.Window)
                   (ww29 :: GHC.Base.Maybe
                              (XMonad.StackSet.Stack Graphics.X11.Types.Window))
                   (ww30 :: XMonad.Core.ScreenId)
                   (ww31 :: XMonad.Core.ScreenDetail)
                   (ww32 :: [XMonad.StackSet.Screen
                               XMonad.Core.WorkspaceId
                               (XMonad.Core.Layout Graphics.X11.Types.Window)
                               Graphics.X11.Types.Window
                               XMonad.Core.ScreenId
                               XMonad.Core.ScreenDetail])
                   (ww33 :: [XMonad.StackSet.Workspace
                               XMonad.Core.WorkspaceId
                               (XMonad.Core.Layout Graphics.X11.Types.Window)
                               Graphics.X11.Types.Window])
                   (ww34 :: Data.Map.Base.Map
                              Graphics.X11.Types.Window XMonad.StackSet.RationalRect)
                   (ww35 :: Data.Set.Base.Set Graphics.X11.Types.Window)
                   (ww36 :: Data.Map.Base.Map Graphics.X11.Types.Window GHC.Types.Int)
                   (ww37 :: GHC.Base.Maybe
                              (Graphics.X11.Xlib.Types.Position
                               -> Graphics.X11.Xlib.Types.Position -> XMonad.Core.X (),
                               XMonad.Core.X ()))
                   (ww38 :: GHC.Prim.Word#)
                   (ww39 :: Data.Map.Base.Map
                              GHC.Base.String
                              (Data.Either.Either GHC.Base.String XMonad.Core.StateExtension))
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 XMonad.Operations.$wwindows
                   (\ (x :: XMonad.StackSet.StackSet
                              XMonad.Core.WorkspaceId
                              (XMonad.Core.Layout Graphics.X11.Types.Window)
                              Graphics.X11.Types.Window
                              XMonad.Core.ScreenId
                              XMonad.Core.ScreenDetail)[OneShot] ->
                    case x of ww40 { XMonad.StackSet.StackSet ww41 ww42 ww43 ww44 ww45 ww46 ww47 ww48 ->
                    case XMonad.StackSet.$wfocusWindow
                           @ XMonad.Core.ScreenId
                           @ Graphics.X11.Types.Window
                           @ XMonad.Core.WorkspaceId
                           @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                           @ XMonad.Core.ScreenDetail
                           XMonad.Core.$fEqScreenId
                           GHC.Word.$fEqWord64
                           GHC.Classes.$fEq[]_$s$fEq[]1
                           w
                           ww41
                           ww42
                           ww43
                           ww44
                           ww45
                           ww46
                           ww47
                           ww48 of ww49 { (#,,,,,,,#) ww50 ww51 ww52 ww53 ww54 ww55 ww56 ww57 ->
                    XMonad.StackSet.StackSet
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail
                      ww50
                      ww51
                      (case ww52 of wild {
                         GHC.Base.Nothing
                         -> GHC.Base.Nothing
                              @ (XMonad.StackSet.Stack Graphics.X11.Types.Window)
                         GHC.Base.Just x1
                         -> GHC.Base.Just
                              @ (XMonad.StackSet.Stack Graphics.X11.Types.Window)
                              (case x1 of wild1 { XMonad.StackSet.Stack ds ds1 ds2 ->
                               case ds1 of wild2 {
                                 [] -> wild1
                                 : ipv ipv1
                                 -> XMonad.StackSet.Stack
                                      @ Graphics.X11.Types.Window
                                      ds
                                      (GHC.Types.[] @ Graphics.X11.Types.Window)
                                      (GHC.Base.++
                                         @ Graphics.X11.Types.Window
                                         (GHC.List.reverse1
                                            @ Graphics.X11.Types.Window
                                            wild2
                                            (GHC.Types.[] @ Graphics.X11.Types.Window))
                                         ds2) } }) })
                      ww53
                      ww54
                      ww55
                      ww56
                      ww57 } })
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   w1) -}
eecfeed4a04adc693b419e684954acb1
  $wmouseBindings ::
    GHC.Prim.Word#
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button)
         (Graphics.X11.Types.Window -> XMonad.Core.X ())
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#) ->
                 let {
                   mm :: GHC.Word.Word32 {- Strictness: m -} = GHC.Word.W32# ww
                 } in
                 XMonad.Config.$fDefaultXConfig_$sfromList
                   @ (Graphics.X11.Types.Window -> XMonad.Core.X ())
                   (GHC.Types.:
                      @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button),
                         Graphics.X11.Types.Window -> XMonad.Core.X ())
                      ((mm `cast` (Sym (Foreign.C.Types.N:CUInt[0])),
                        Graphics.X11.Types.rrNotify),
                       XMonad.My.Keys.mouseBindings3
                         `cast`
                       (<Graphics.X11.Types.Window>_R
                        ->_R Trans
                                 (<XMonad.Core.XConf>_R
                                  ->_R Trans
                                           (<XMonad.Core.XState>_R
                                            ->_R Sym (GHC.Types.N:IO[0]
                                                          <((), XMonad.Core.XState)>_R))
                                           (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                     <XMonad.Core.XState>_N
                                                     <GHC.Types.IO>_R
                                                     <()>_N)))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                <*>_N
                                                <XMonad.Core.XConf>_R
                                                <Control.Monad.Trans.State.Lazy.StateT
                                                   XMonad.Core.XState GHC.Types.IO>_R
                                                <()>_N))
                                      (Sym (XMonad.Core.N:X[0]) <()>_N))))
                      (GHC.Types.:
                         @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button),
                            Graphics.X11.Types.Window -> XMonad.Core.X ())
                         ((mm `cast` (Sym (Foreign.C.Types.N:CUInt[0])),
                           Graphics.X11.Types.keyPress),
                          XMonad.My.Keys.mouseBindings2
                            `cast`
                          (<Graphics.X11.Types.Window>_R
                           ->_R Trans
                                    (<XMonad.Core.XConf>_R
                                     ->_R Trans
                                              (<XMonad.Core.XState>_R
                                               ->_R Sym (GHC.Types.N:IO[0]
                                                             <((), XMonad.Core.XState)>_R))
                                              (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                        <XMonad.Core.XState>_N
                                                        <GHC.Types.IO>_R
                                                        <()>_N)))
                                    (Trans
                                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                   <*>_N
                                                   <XMonad.Core.XConf>_R
                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                      XMonad.Core.XState GHC.Types.IO>_R
                                                   <()>_N))
                                         (Sym (XMonad.Core.N:X[0]) <()>_N))))
                         (GHC.Types.:
                            @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button),
                               Graphics.X11.Types.Window -> XMonad.Core.X ())
                            ((mm `cast` (Sym (Foreign.C.Types.N:CUInt[0])),
                              Graphics.X11.Types.keyRelease),
                             XMonad.My.Keys.mouseBindings1)
                            (GHC.Types.[]
                               @ ((Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button),
                                  Graphics.X11.Types.Window -> XMonad.Core.X ())))))) -}
1762f92a71a9afe87ce9c853b011f520
  keys ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.KeySym)
         (XMonad.Core.X ())
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.Util.EZConfig.mkKeymap
                   @ XMonad.Core.Layout
                   c
                   (XMonad.My.Keys.rawKeys c)) -}
bc283b54aa35a8625a95bfed5ef84f19
  mouseBindings ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> Data.Map.Base.Map
         (Graphics.X11.Types.KeyMask, Graphics.X11.Types.Button)
         (Graphics.X11.Types.Window -> XMonad.Core.X ())
  {- Arity: 1,
     Strictness: <S,1*U(A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 case w of ww { XMonad.Core.XConfig ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ->
                 XMonad.My.Keys.$wmouseBindings ww8 }) -}
5a98a1885078f71f87b95624d74233f5
  mouseBindings1 :: Graphics.X11.Types.Window -> XMonad.Core.X ()
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (w :: Graphics.X11.Types.Window) ->
                 let {
                   k :: XMonad.Core.X ()
                   = XMonad.Actions.FlexibleResize.mouseResizeEdgeWindow
                       XMonad.Actions.FlexibleResize.mouseResizeWindow1
                       w
                 } in
                 (\ (r1 :: XMonad.Core.XConf)
                    (eta :: XMonad.Core.XState)
                    (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case r1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                  case XMonad.Operations.$wfocus
                         w
                         ww1
                         ww2
                         ww3
                         ww4
                         ww5
                         ww6
                         ww7
                         ww8
                         ww9
                         ww10
                         ww11
                         ww12
                         ww13
                         ww14
                         ww15
                         ww16
                         ww17
                         ww18
                         ww19
                         ww20
                         ww21
                         ww22
                         ww23
                         ww24
                         ww26
                         ww27
                         eta
                         eta1 of ds1 { (#,#) ipv ipv1 ->
                  ((k `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      ww)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XConf>_R
                       ->_R Trans
                                (<XMonad.Core.XState>_R
                                 ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                          <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <XMonad.Core.XConf>_R
                                     <Control.Monad.Trans.State.Lazy.StateT
                                        XMonad.Core.XState GHC.Types.IO>_R
                                     <()>_N))
                           (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
f3eaead2f996c7bdf73803a1cf182e70
  mouseBindings2 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U><S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Graphics.X11.Types.Window)
                   (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w2 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.My.Keys.$wlvl2
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w3 } }) -}
bec01bdd90acf5faa0d8757cd669d817
  mouseBindings3 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><S(LSSSSSSSSSSSSSSSSSSSSSSSLSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,A,U,U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Graphics.X11.Types.Window)
                   (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case XMonad.Operations.$wfocus
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16
                        ww17
                        ww18
                        ww19
                        ww20
                        ww21
                        ww22
                        ww23
                        ww24
                        ww26
                        ww27
                        w2
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 XMonad.Operations.mouseMoveWindow1
                   w
                   (XMonad.Core.XConf
                      ww1
                      ww2
                      ww3
                      ww4
                      ww5
                      ww6
                      ww7
                      ww8
                      ww9
                      ww10
                      ww11
                      ww12
                      ww13
                      ww14
                      ww15
                      ww16
                      ww17
                      ww18
                      ww19
                      ww20
                      ww21
                      ww22
                      ww23
                      ww24
                      XMonad.My.Keys.mouseBindings4
                      ww26
                      ww27)
                   (case ipv1 of wild { (,) a1 s' -> s' })
                   ipv } }) -}
32b7e10dfd3d0408482680a9156ccf4d
  mouseBindings4 :: GHC.Types.Bool
  {- Strictness: x -}
e026422a43bd3e86064bccafdc319d50
  rawKeys ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (c :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 letrec {
                   go2 :: [XMonad.Core.XConfig XMonad.Core.Layout
                           -> [(GHC.Base.String, XMonad.Core.X ())]]
                          -> [(GHC.Base.String, XMonad.Core.X ())]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [XMonad.Core.XConfig XMonad.Core.Layout
                               -> [(GHC.Base.String, XMonad.Core.X ())]]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ())
                       : y ys
                       -> GHC.Base.++
                            @ (GHC.Base.String, XMonad.Core.X ())
                            (y c)
                            (go2 ys) }
                 } in
                 go2 XMonad.My.Keys.rawKeys1) -}
826039c902a74d9635fb1b301307282e
  rawKeys1 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys203
                   XMonad.My.Keys.rawKeys2) -}
a0c60cfd4d3f2c7bc51e55bec23120c1
  rawKeys10 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys74
                   XMonad.My.Keys.rawKeys11) -}
ab77a652565c744ab1cd4bc9fb4e4865
  rawKeys100 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys110
                   XMonad.My.Keys.rawKeys101) -}
74042a65c2a26c6fff4dbb524dd4dbd6
  rawKeys101 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys102
                   (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ()))) -}
5c7f76f48533416aeb1f5bc57f88afe2
  rawKeys102 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys109,
                  XMonad.My.Keys.rawKeys103
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
7e6cbe490409c3fc18b402115307fc44
  rawKeys103 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys104
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
ae3ff81646f9e917a0b97d61f11edb08
  rawKeys104 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys105
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c879b958605d47d564a9777523c9328a
  rawKeys105 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys106
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
e1e9790f56e3200454bc89ae5bc68063
  rawKeys106 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys107) -}
2d8651287de8829afde4133b259e3671
  rawKeys107 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys108
                   (GHC.Types.[] @ GHC.Base.String)) -}
754eba7b0fab410403893002d53a2f8d
  rawKeys108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "toggle-lb-hack.sh"#) -}
89916ad53ee8ded94b57a3373b870ecf
  rawKeys109 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-b"#) -}
0142964048afc2c7b29a48fbd3534afc
  rawKeys11 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys66
                   XMonad.My.Keys.rawKeys12) -}
63ae4cb6f38ff0232856a3e51b5279c5
  rawKeys110 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys117,
                  XMonad.My.Keys.rawKeys111
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
279dd9107d9e92f71c6f804f453f5b68
  rawKeys111 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ (XMonad.Layout.MultiToggle.Toggle Graphics.X11.Types.Window)
                   XMonad.My.Keys.rawKeys113
                     `cast`
                   (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.MultiToggle.Toggle
                                                      Graphics.X11.Types.Window>_N)
                   XMonad.My.Keys.rawKeys112) -}
2ff9e1d1f7fb494a1ee40fa22cbf0445
  rawKeys112 ::
    XMonad.Layout.MultiToggle.Toggle Graphics.X11.Types.Window
  {- Unfolding: (XMonad.Layout.MultiToggle.Toggle
                   @ Graphics.X11.Types.Window
                   @ XMonad.Layout.MultiToggle.Instances.StdTransformers
                   XMonad.Layout.MultiToggle.Instances.$fTransformerStdTransformersWord64
                   XMonad.Layout.MultiToggle.Instances.NBFULL) -}
c595dc4e401a499605ae4278f6d46cbf
  rawKeys113 ::
    Data.Typeable.Internal.Typeable
      (XMonad.Layout.MultiToggle.Toggle Graphics.X11.Types.Window)
  {- Unfolding: (XMonad.Layout.MultiToggle.$fMessageToggle_$cp1Message
                   @ Graphics.X11.Types.Window
                   XMonad.My.Keys.rawKeys114
                     `cast`
                   (Sym (Data.Typeable.Internal.N:Typeable[0]
                             <*>_N <Graphics.X11.Types.Window>_N))) -}
8add5758f23cc5097e247de99bd16144
  rawKeys114 ::
    GHC.Prim.Proxy# Graphics.X11.Types.Window
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Graphics.X11.Types.Window) ->
                 XMonad.My.Keys.rawKeys115) -}
112d1cb28f063167c5371fdced5dc4a3
  rawKeys115 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           XMonad.My.Keys.rawKeys116
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Word.$tcWord64
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
cb72878e2d60e48d05c19695e036d3cd
  rawKeys116 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8563698015495396214##
                   17617305094906953856##) -}
3710b495479fc37a255fbdbe5b8ab704
  rawKeys117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-f"#) -}
c58509df18f763b6eb16c0f0f73add3d
  rawKeys118 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys120,
                  XMonad.My.Keys.rawKeys119
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
0535c61e6b139923f66c2bdd412b0a31
  rawKeys119 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.ToggleLayouts.ToggleLayout
                   XMonad.Layout.ToggleLayouts.$fMessageToggleLayout1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.ToggleLayouts.ToggleLayout>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.ToggleLayouts.ToggleLayout>_N))
                   XMonad.Layout.ToggleLayouts.ToggleLayout) -}
2fd36f21176969911140722f45445490
  rawKeys12 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys58
                   XMonad.My.Keys.rawKeys13) -}
487dcb36267b2eab5944100a54484ec0
  rawKeys120 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-x"#) -}
ad910a31dc2019b2acc9c07ed2ae52cb
  rawKeys121 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys124,
                  XMonad.My.Keys.rawKeys122
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
6f9745d52b621ea74327f6700d7e86c1
  rawKeys122 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.IncMasterN
                   XMonad.Layout.$fMessageIncMasterN1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.IncMasterN>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.IncMasterN>_N))
                   XMonad.My.Keys.rawKeys123) -}
0598971f3a164f3aa4657c60e1061523
  rawKeys123 :: XMonad.Layout.IncMasterN
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (XMonad.Layout.IncMasterN -1#) -}
622c0da25c4c1f8a091b8db0a3d4a08c
  rawKeys124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-l"#) -}
040d41bca8d29d12a265aeca5c698d17
  rawKeys125 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys128,
                  XMonad.My.Keys.rawKeys126
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
1dd3741b242fedf2e6f0b5eb74b74292
  rawKeys126 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.IncMasterN
                   XMonad.Layout.$fMessageIncMasterN1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.IncMasterN>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.IncMasterN>_N))
                   XMonad.My.Keys.rawKeys127) -}
3734425c1091cd318c318ccf1c1dcbb8
  rawKeys127 :: XMonad.Layout.IncMasterN
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (XMonad.Layout.IncMasterN 1#) -}
1e5b3f9bfd242d92d44477cd9a1c1f81
  rawKeys128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-h"#) -}
5202ba7775ea014eba1da5d0b0d9a328
  rawKeys129 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys131,
                  XMonad.My.Keys.rawKeys130
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
07c0fc79d3870416c7010f5f7480f1b5
  rawKeys13 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys50
                   XMonad.My.Keys.rawKeys14) -}
31106155d6d34394eb5d297deb1f7b2b
  rawKeys130 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.MouseResizableTile.MRTMessage
                   XMonad.Layout.MouseResizableTile.$fMessageMRTMessage1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.MouseResizableTile.MRTMessage>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.MouseResizableTile.MRTMessage>_N))
                   XMonad.Layout.MouseResizableTile.ShrinkSlave) -}
0d431813dd93df9832741ae110d6de4d
  rawKeys131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-i"#) -}
33600e03f7c3765e2b576c6bd11c3f4e
  rawKeys132 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys134,
                  XMonad.My.Keys.rawKeys133
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
9b1422a5b0b4c3ec7987118523327597
  rawKeys133 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.MouseResizableTile.MRTMessage
                   XMonad.Layout.MouseResizableTile.$fMessageMRTMessage1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.MouseResizableTile.MRTMessage>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.MouseResizableTile.MRTMessage>_N))
                   XMonad.Layout.MouseResizableTile.ExpandSlave) -}
604fe85d096ae3e3601e51975294adcb
  rawKeys134 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-o"#) -}
704b298dfe2f98797b8e1d663442340e
  rawKeys135 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys137,
                  XMonad.My.Keys.rawKeys136
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
bef8c2147c70d72d93a4a41e336b8ca9
  rawKeys136 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.Resize
                   XMonad.Layout.$fMessageResize1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.Resize>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.Resize>_N))
                   XMonad.Layout.Expand) -}
789f163c5ed5b1680ab1bcff1215263e
  rawKeys137 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-l"#) -}
afab93841b8bcc114ae61b716d59c506
  rawKeys138 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys140,
                  XMonad.My.Keys.rawKeys139
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
47b10ea65b0ea5f49ccfb88990b5929a
  rawKeys139 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.Resize
                   XMonad.Layout.$fMessageResize1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.Resize>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.Resize>_N))
                   XMonad.Layout.Shrink) -}
84b21bfddd2fb502baef3a6b39974c18
  rawKeys14 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys42
                   XMonad.My.Keys.rawKeys15) -}
e4f1743e9105147f20e7e60aa72eaf73
  rawKeys140 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-h"#) -}
339728bc80aca724ee10a5fe9e9d0980
  rawKeys141 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys142,
                  XMonad.Actions.Promote.promote1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
e01f39b1aea1e0335fc1f5f791cd490f
  rawKeys142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-m"#) -}
69f79e996a5902f0b61d36d834fcd081
  rawKeys143 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys145,
                  XMonad.My.Keys.rawKeys144
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
2fedbd3fd02d43081b19b49f87c687c7
  rawKeys144 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w1 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.focusMaster
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w2 } }) -}
d733ec94f96f19ca362ae9b3b23e6b1c
  rawKeys145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-m"#) -}
88a5e2db1acb3024c57c879f1e9dcb93
  rawKeys146 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-<Space>"#) -}
80ee500512de21d7f584a9a1ee178a35
  rawKeys147 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys149,
                  XMonad.My.Keys.rawKeys148
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
be807aeea5d41136465e4536180e010f
  rawKeys148 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Unfolding: (XMonad.Operations.sendMessage1
                   @ XMonad.Layout.ChangeLayout
                   XMonad.Layout.$fMessageChangeLayout1
                     `cast`
                   (Trans
                        (Sym (Data.Typeable.Internal.N:Typeable[0]
                                  <*>_N <XMonad.Layout.ChangeLayout>_N))
                        (Sym (XMonad.Core.N:Message[0]) <XMonad.Layout.ChangeLayout>_N))
                   XMonad.Layout.NextLayout) -}
86749a31e338d013428df181e93f863b
  rawKeys149 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-<Space>"#) -}
e5a635a50bb342bb873761ee00c59185
  rawKeys15 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys34
                   XMonad.My.Keys.rawKeys16) -}
78205849b5a04213ea704dba6a18afa7
  rawKeys150 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1,
     Strictness: <L,1*U(A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 case XMonad.My.Keys.$wlvl1 w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (GHC.Base.String, XMonad.Core.X ()) ww1 ww2 }) -}
a04104b0e312a0cc2c3aa9fdaa51d4c2
  rawKeys151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-<Return>"#) -}
a0c1f2474a79962040217bffa77581d7
  rawKeys152 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys159,
                  XMonad.My.Keys.rawKeys153
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
7c424726c7d3b5e446c80a78983fedf6
  rawKeys153 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys154
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
a8c51ef02e03e92aa73fe1152ffeac49
  rawKeys154 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys155
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8bb83810acd6c6b7e16e7ce185203c0a
  rawKeys155 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys156
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
71c0c4daf087983fbf7d708cbe580d7b
  rawKeys156 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys157) -}
20262c21ce37ee45d224a51483f750cb
  rawKeys157 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys158
                   (GHC.Types.[] @ GHC.Base.String)) -}
17742f9709d1e1e07b65e2a15dc6f980
  rawKeys158 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "dmenu_run"#) -}
189e77f5b1d0d112de2140438ab54158
  rawKeys159 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-;"#) -}
8c0bafd8479c318f0cfed0350bb5ad45
  rawKeys16 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys26
                   XMonad.My.Keys.rawKeys17) -}
c0686aee5c043858cc475a74c00bbbb4
  rawKeys160 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.My.Keys.rawKeys161) -}
469d53bbb8ec210382b28741bed90ebd
  rawKeys161 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (XMonad.My.Keys.rawKeys163
                   XMonad.My.Keys.rawKeys162
                     `cast`
                   ([Sym (XMonad.Core.N:ScreenId[0])])_R) -}
01f73b5784c0087e72e2606da84c0a88
  rawKeys162 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0# 9223372036854775807#) -}
4d73f6451626592f76f07737d46b725d
  rawKeys163 ::
    [XMonad.Core.ScreenId] -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.CString.unpackFoldrCString#
                   @ ([XMonad.Core.ScreenId] -> [(GHC.Base.String, XMonad.Core.X ())])
                   "wer"#
                   XMonad.My.Keys.rawKeys165
                   XMonad.My.Keys.rawKeys164) -}
82d5098f61ddccee3693d429a932360d
  rawKeys164 ::
    [XMonad.Core.ScreenId] -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: [XMonad.Core.ScreenId]) ->
                 GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ())) -}
fe9d9ca35f2f2dcfde25429e8b623235
  rawKeys165 ::
    GHC.Types.Char
    -> ([XMonad.Core.ScreenId]
        -> [(GHC.Base.String, XMonad.Core.X ())])
    -> [XMonad.Core.ScreenId]
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 3 -}
bab5317c379b8fcb27e72520f0745535
  rawKeys166 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [([GHC.Types.Char], XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.My.Keys.rawKeys167) -}
9df1cefb594e00ee88104b485c1c7bf5
  rawKeys167 :: [([GHC.Types.Char], XMonad.Core.X ())]
  {- Unfolding: (XMonad.My.Keys.rawKeys_xs
                   XMonad.My.Keys.rawKeys169
                   XMonad.My.Keys.rawKeys168) -}
bb9eaaa7cf97c0a9c181cde2778733f4
  rawKeys168 :: [XMonad.Core.X ()]
  {- Unfolding: (XMonad.My.Keys.rawKeys_go 0#) -}
ee436b07958a184e938cce4611b5a8cf
  rawKeys169 :: [[GHC.Types.Char]]
  {- Unfolding: (XMonad.My.Keys.rawKeys_go1
                   XMonad.My.Keys.rawKeys170) -}
e7f190e0aeaf4d9a1fd83c4d0d5d4a47
  rawKeys17 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys18
                   (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ()))) -}
b877d0d54060045279ae8b76a7ce46a4
  rawKeys170 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
bc1d31012f77f44805014dbd9dbc3049
  rawKeys171 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.My.Keys.rawKeys172) -}
b9c8b0af48d7ada37201f3a51d4e877e
  rawKeys172 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys201
                   XMonad.My.Keys.rawKeys173) -}
55669ee31af3be235212f618cdec856d
  rawKeys173 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys198
                   XMonad.My.Keys.rawKeys174) -}
76d10476f84ab3875aae309ef0fcda7e
  rawKeys174 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys195
                   XMonad.My.Keys.rawKeys175) -}
ae7c50c4476f06fc23b2304f82c2f94f
  rawKeys175 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys192
                   XMonad.My.Keys.rawKeys176) -}
ebcb6eacfd81fec4b0936ed882d4c642
  rawKeys176 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys189
                   XMonad.My.Keys.rawKeys177) -}
fde07b2c45758b1019df9b88d82c7f74
  rawKeys177 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys187
                   XMonad.My.Keys.rawKeys178) -}
46d5af61a30871c0102817509b8e5396
  rawKeys178 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys184
                   XMonad.My.Keys.rawKeys179) -}
6a3eb960a87b1d377cf7919769b1eb35
  rawKeys179 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys180
                   (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ()))) -}
59ed6234dedb1a01d26132335782f7fb
  rawKeys18 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys25,
                  XMonad.My.Keys.rawKeys19
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
27db928289dc5941b1f96a4cc700a75c
  rawKeys180 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys183,
                  XMonad.My.Keys.rawKeys181
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
ec3cc7974800a1186403c1a2eaeb58da
  rawKeys181 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: XMonad.Core.XConf) ->
                 XMonad.Actions.GroupNavigation.nextMatch3
                   XMonad.Actions.GroupNavigation.Forward
                   XMonad.My.Keys.rawKeys182
                     `cast`
                   (Trans
                        (<GHC.Word.Word64>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Types.Bool,
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Types.Bool>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Types.Bool>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Types.Bool>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <GHC.Word.Word64>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Types.Bool>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Types.Bool>_N)))
                   XMonad.Actions.GroupNavigation.nextMatch2
                     `cast`
                   (Trans
                        (<XMonad.Core.XConf>_R
                         ->_R Trans
                                  (<XMonad.Core.XState>_R
                                   ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <()>_N))
                             (Sym (XMonad.Core.N:X[0]) <()>_N)))
                   eta) -}
d7046ac6f6016df4c35c7a6a175d063e
  rawKeys182 ::
    GHC.Word.Word64
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Types.Bool, XMonad.Core.XState) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta2 :: GHC.Word.Word64)
                   (eta3 :: XMonad.Core.XConf)
                   (eta4 :: XMonad.Core.XState)
                   (eta5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta5, (GHC.Types.True, eta4) #)) -}
b7319f3c8e04d98a288a72bb96d752c0
  rawKeys183 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M1-<Tab>"#) -}
3c4f739898892112c171e4e340016101
  rawKeys184 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys186,
                  XMonad.My.Keys.rawKeys185
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
a20e167417dc53db1257e5b804e77769
  rawKeys185 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,U><S(SLSSSLLLSSSLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: XMonad.Core.XConf)
                   (eta1 :: XMonad.Core.XState)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case eta1 of wild { XMonad.Core.XState dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 ds4 ds5 ds6 dt9 ds7 ->
                 case dt3 of wild1 {
                   GHC.Base.Nothing -> (# eta2, (GHC.Tuple.(), wild) #)
                   GHC.Base.Just x
                   -> ((XMonad.Hooks.ToggleFade.toggleFade1
                          (case x of wild2 { XMonad.StackSet.Stack ds3 ds1 ds2 -> ds3 })
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                         wild)
                        `cast`
                      (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                        eta2 } }) -}
6acc5c78509f8d473569aaf24c3a08fe
  rawKeys186 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-\\"#) -}
755c90c0156107cf9b466e971fdb2099
  rawKeys187 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys188,
                  XMonad.My.Helpers.toggleFloat1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
72844a5d1d44c6fa5efa4c89e9ecf8da
  rawKeys188 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-`"#) -}
828912e8d78ac8ea11adab1472ac48e2
  rawKeys189 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys191,
                  XMonad.My.Keys.rawKeys190
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
bb208003ff1f767a5734f617d619dbd6
  rawKeys19 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys20
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
22fdf3080b2da86e9848359af676b706
  rawKeys190 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w1 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.swapUp
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w2 } }) -}
14860042092a8cee77031ac3bc188e40
  rawKeys191 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-k"#) -}
6971f9455dceb0e57b8115a9019c47b8
  rawKeys192 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys194,
                  XMonad.My.Keys.rawKeys193
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
6247a58b4b792738e0ab18ea889aab52
  rawKeys193 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w1 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.swapDown
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w2 } }) -}
a088542b4d4fd29e38734813424db9a5
  rawKeys194 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-j"#) -}
6adc0a897b677671526e084da5824d3d
  rawKeys195 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys197,
                  XMonad.My.Keys.rawKeys196
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
e23f9b2b6c60489943ddc995bd535e80
  rawKeys196 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w1 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.focusUp
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w2 } }) -}
c6f13a335bb6f943735a8a4a3989d9e4
  rawKeys197 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-k"#) -}
6f25bedb1140de8787322acac061262d
  rawKeys198 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys200,
                  XMonad.My.Keys.rawKeys199
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
e8e218f76b7564693bc800b64073c1da
  rawKeys199 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <S(LSSSSSSSSSSSSSSSSSSSSSSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLLSSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { XMonad.Core.XConf ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ->
                 case w1 of ww28 { XMonad.Core.XState ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ->
                 XMonad.Operations.$wwindows
                   (XMonad.StackSet.focusDown
                      @ XMonad.Core.WorkspaceId
                      @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                      @ Graphics.X11.Types.Window
                      @ XMonad.Core.ScreenId
                      @ XMonad.Core.ScreenDetail)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24
                   ww25
                   ww26
                   ww27
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww34
                   ww35
                   ww36
                   ww37
                   ww38
                   ww39
                   ww40
                   ww41
                   w2 } }) -}
406313005fbc8d149c656b17115f7c7b
  rawKeys2 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys171
                   XMonad.My.Keys.rawKeys3) -}
a930af0f6afff2703ae4955bae2c1089
  rawKeys20 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys21
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
19b0a06c5619f4747c2fb9e97a61fdb7
  rawKeys200 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-j"#) -}
3bf5b51d614364c3bd064927e6a80d77
  rawKeys201 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys202,
                  XMonad.Operations.kill1
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
9ac5483c18f4c7f9903a6d6de1a56640
  rawKeys202 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-q"#) -}
0340059bd66e4e282b4613df0d51ed30
  rawKeys203 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.My.Keys.rawKeys204) -}
175102c1e4fa56c079d945be73ffca84
  rawKeys204 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys218
                   XMonad.My.Keys.rawKeys205) -}
12da984bc5bf90652be2dbacecac4390
  rawKeys205 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys210
                   XMonad.My.Keys.rawKeys206) -}
41de4268f215fb0a7d8fae439d7e6718
  rawKeys206 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys207
                   (GHC.Types.[] @ (GHC.Base.String, XMonad.Core.X ()))) -}
7278531a4f74d881e1b3c992b803da70
  rawKeys207 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys209,
                  XMonad.My.Keys.rawKeys208
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
963550ec838c8151de36ffd894ba56ac
  rawKeys208 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: XMonad.Core.XConf)
                   (eta :: XMonad.Core.XState)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (((XMonad.Actions.Commands.runCommand
                      (case r1 of wild { XMonad.Core.XConf ds5 dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 ds6 ds7 ds8 ds9 ds10 ->
                       GHC.Base.augment
                         @ (GHC.Base.String, XMonad.Core.X ())
                         (\ @ b
                            (c :: (GHC.Base.String, XMonad.Core.X ()) -> b -> b)[OneShot]
                            (n2 :: b)[OneShot] ->
                          GHC.Base.foldr
                            @ (GHC.Base.String, XMonad.Core.X ())
                            @ b
                            c
                            n2
                            (XMonad.My.Commands.commands_go dt6))
                         XMonad.My.Commands.commands2 }))
                     `cast`
                   (Trans
                        (XMonad.Core.N:X[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <XMonad.Core.XConf>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                XMonad.Core.XState GHC.Types.IO>_R
                             <()>_N))
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                    eta)
                   `cast`
                 (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                   eta1) -}
271cf2a1fa509cedab4a6e2e49cc5e4f
  rawKeys209 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-a"#) -}
82a5eb4f94757a6e02f275c09f7adda5
  rawKeys21 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys22
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
4899dd3bf065827e85fa879ac1b85661
  rawKeys210 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys217,
                  XMonad.My.Keys.rawKeys211
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
f53b4b095b4f57d030da91c16c00c6fc
  rawKeys211 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys212
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (# ipv, (GHC.Tuple.(), case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
94ed27eb71bd32e35b2ea8d694591df0
  rawKeys212 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys213
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c60e92138426540d40463cc0186a53aa
  rawKeys213 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys214
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
ffcf085cc338a80059593013498da8ed
  rawKeys214 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys215) -}
ea8abb5ed3d74d084686644b14b7bc9a
  rawKeys215 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys216
                   (GHC.Types.[] @ GHC.Base.String)) -}
0bc7250bdbbf57e50e18cc263190dac0
  rawKeys216 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "xmonad --recompile && xmonad --restart"#) -}
df3c8730ab75d2ec81db0d84ad607cdf
  rawKeys217 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-r"#) -}
86ca9403f75818a9b90c865dc0a79819
  rawKeys218 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys220,
                  XMonad.My.Keys.rawKeys219
                    `cast`
                  (Trans
                       (<XMonad.Core.XConf>_R
                        ->_R Trans
                                 (<XMonad.Core.XState>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                           <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                       (Trans
                            (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <()>_N))
                            (Sym (XMonad.Core.N:X[0]) <()>_N))))) -}
b279355b65cdeae26c9e3dc878dff01a
  rawKeys219 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3, Strictness: <B,A><B,A><B,U>b,
     Unfolding: InlineRule (3, True, False)
                (\ (eta2 :: XMonad.Core.XConf)
                   (eta3 :: XMonad.Core.XState)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Exit.exitWith1 @ () GHC.IO.Exception.ExitSuccess eta4
                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                           ((), XMonad.Core.XState) #)
                 of {}) -}
7ec323ae4ec3375f0a6d4580ef27357e
  rawKeys22 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys23) -}
e29a30e98208c540f5e651742384a875
  rawKeys220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M-S-q"#) -}
e259cab9aa87ac1aadb487f9b614632c
  rawKeys23 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys24
                   (GHC.Types.[] @ GHC.Base.String)) -}
42c5b3f0a84571d308e7deba4f73bfba
  rawKeys24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mpc prev"#) -}
d54c6e0a51f1a8d96b6194492f999ce0
  rawKeys25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<XF86AudioPrev>"#) -}
c7c79e2e24054e6775708280f4a8a02e
  rawKeys26 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys33,
                  XMonad.My.Keys.rawKeys27
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
cec5c121f69d97bbcc84c438735cdf86
  rawKeys27 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys28
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
fea3cd11506d9cbb241e421ad7cba05e
  rawKeys28 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys29
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
1d54edefc6a2447b3e665233f2d5693b
  rawKeys29 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys30
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
f2e0e76f10b813abc358204635222141
  rawKeys3 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys166
                   XMonad.My.Keys.rawKeys4) -}
116a55750b009a0c51c71c0a36c2f8a2
  rawKeys30 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys31) -}
81d4898caa2138e0d6d92f40914e9dbd
  rawKeys31 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys32
                   (GHC.Types.[] @ GHC.Base.String)) -}
05ab31212a54aaec49d241d38ec33619
  rawKeys32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mpc next"#) -}
6529e90d1f9053078328bdbfb72a6bbb
  rawKeys33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<XF86AudioNext>"#) -}
65afb49a463da690d7f9fbc59b83f4d8
  rawKeys34 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys41,
                  XMonad.My.Keys.rawKeys35
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
6429b4cd5c049584d89c4b1c886130a8
  rawKeys35 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys36
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
e1d8e89f1fb2f8f8bf3fc797582a3f09
  rawKeys36 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys37
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
198ecb8b4daa85d9ae25b73d5b9cf2ec
  rawKeys37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys38
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
1599679352a15661c24d2e32bb05f87b
  rawKeys38 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys39) -}
12037a7cfa010d8ebf3296e728f9b991
  rawKeys39 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys40
                   (GHC.Types.[] @ GHC.Base.String)) -}
b22ab050afb10af307b590f971733cbc
  rawKeys4 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys160
                   XMonad.My.Keys.rawKeys5) -}
50c32fca888fe33150fc9e707c676d42
  rawKeys40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mpc pause"#) -}
4a6b1e2b39d30e8975927fedf54d6a3c
  rawKeys41 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<XF86AudioStop>"#) -}
48273da94e2aba70954095a2ffddd6dd
  rawKeys42 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys49,
                  XMonad.My.Keys.rawKeys43
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
f1e447f2fc647aa2d30ed9204ef2f536
  rawKeys43 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys44
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
0059cd36f44ce2275c0666f5eb53c33f
  rawKeys44 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys45
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ec437730a16d619472d9dfb040ea693a
  rawKeys45 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys46
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
f614ba5cad7db0e9e83df1143a234c40
  rawKeys46 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys47) -}
91365beb95d325e3e162a610ac5c76e8
  rawKeys47 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys48
                   (GHC.Types.[] @ GHC.Base.String)) -}
1b5a17a89593175a694cc9080d6f52f9
  rawKeys48 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "mpc toggle"#) -}
93e3e54adcf65a42ff339fc1005e276f
  rawKeys49 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<XF86AudioPlay>"#) -}
d6a3f39a7bc3c5b75161018b4d81be97
  rawKeys5 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys150
                   XMonad.My.Keys.rawKeys6) -}
6b1078c7f10c7d764c3587f68f824505
  rawKeys50 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys57,
                  XMonad.My.Keys.rawKeys51
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
0a33b86d50e0b6e28f1ba792eb0a6227
  rawKeys51 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys52
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
8db5358a619da41ae3cd1be6f5f0c852
  rawKeys52 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys53
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
37b7ecfa435a271332229fc3180f4e07
  rawKeys53 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys54
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
90e7a3b940a559bc5b83c7b6bd271e90
  rawKeys54 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys55) -}
a88a4c6888d6718674f1f3dd84cfe299
  rawKeys55 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys56
                   (GHC.Types.[] @ GHC.Base.String)) -}
cfa0953e71f953e16b61f02cc438cc2d
  rawKeys56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "er dim"#) -}
614c35a79126a2c95560f754931cf41c
  rawKeys57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "<XF86MonBrightnessDown>"#) -}
8be8c08ca55a983ede9c5a303213f42d
  rawKeys58 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys65,
                  XMonad.My.Keys.rawKeys59
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
4ee6f89733d53ed1626665e3cd0a25a0
  rawKeys59 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys60
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
bed4e69364208538416dc176949ceead
  rawKeys6 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys90
                   XMonad.My.Keys.rawKeys7) -}
004161a7d23d8ca0fbbb1005ea249467
  rawKeys60 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys61
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
c75251b61fb5a46c93b43efbd4fd0142
  rawKeys61 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys62
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
625c52039928cfcab82ee29d78103ae8
  rawKeys62 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys63) -}
acaf0cfe10510f15badcea0912c0f20c
  rawKeys63 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys64
                   (GHC.Types.[] @ GHC.Base.String)) -}
375a90cd83fa2b66d9579f65fb7c79d8
  rawKeys64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "er bright"#) -}
eff25a7719de7517796ccedce92258ff
  rawKeys65 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "<XF86MonBrightnessUp>"#) -}
2cc2e9effb20efb8169ae3150f1f6e8a
  rawKeys66 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys73,
                  XMonad.My.Keys.rawKeys67
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
c930ab6f9015fabbf58ae0d8f0557a19
  rawKeys67 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys68
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
158eca07c28ad4f6dd17ddbbd9f9d878
  rawKeys68 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys69
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
e36858528214bbc5697fcc4ea015a942
  rawKeys69 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys70
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
ebe810f1a9aa787388b1d492f69188ce
  rawKeys7 ::
    [XMonad.Core.XConfig XMonad.Core.Layout
     -> [(GHC.Base.String, XMonad.Core.X ())]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (XMonad.Core.XConfig XMonad.Core.Layout
                      -> [(GHC.Base.String, XMonad.Core.X ())])
                   XMonad.My.Keys.rawKeys8
                   (GHC.Types.[]
                      @ (XMonad.Core.XConfig XMonad.Core.Layout
                         -> [(GHC.Base.String, XMonad.Core.X ())]))) -}
7e370578f1d8b9c5af4758a5b9371563
  rawKeys70 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys71) -}
898ca25d585104385a60236e46876ecf
  rawKeys71 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys72
                   (GHC.Types.[] @ GHC.Base.String)) -}
ce97362be547a60713008fdfcdcfc060
  rawKeys72 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "er mute"#) -}
b687803dcd13fae437a0c10d09f6284f
  rawKeys73 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "<XF86AudioMute>"#) -}
5ae391d81c3c42e3c84ecbb8d4f494d3
  rawKeys74 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys81,
                  XMonad.My.Keys.rawKeys75
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
ee2cf0cb0cb0baea22c9a7dc3f4c6b6b
  rawKeys75 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys76
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
6608f4a19cff35dbc2f3f327e3e2ca1f
  rawKeys76 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys77
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
795fd853b9f0b012f8ba246a7a2bdec1
  rawKeys77 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys78
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
a716f0ac36d738798f259cf65cc2640d
  rawKeys78 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys79) -}
d51ade02f8bdf2d367d7d960edb8f2cb
  rawKeys79 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys80
                   (GHC.Types.[] @ GHC.Base.String)) -}
68fe72d5751ce4fc1d82f57ce8189f72
  rawKeys8 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 XMonad.My.Keys.rawKeys9) -}
7f69d39023dff92980ec93fd3f411924
  rawKeys80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "er loud"#) -}
03175e830339e6a5b1c18e0d6ded2cd8
  rawKeys81 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "<XF86AudioRaiseVolume>"#) -}
1f76fccc9811fbb374566ef0c476a610
  rawKeys82 :: ([GHC.Types.Char], XMonad.Core.X ())
  {- Strictness: m,
     Unfolding: ((XMonad.My.Keys.rawKeys89,
                  XMonad.My.Keys.rawKeys83
                    `cast`
                  (Trans
                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <XMonad.Core.XConf>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    XMonad.Core.XState GHC.Types.IO>_R
                                 <()>_N))
                       (Sym (XMonad.Core.N:X[0]) <()>_N)))) -}
ecd91e94edc60aab4b5322870dcdf53d
  rawKeys83 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO System.Posix.Types.ProcessID
                   = XMonad.My.Keys.rawKeys84
                       `cast`
                     (Trans
                          (XMonad.Core.N:X[0] <System.Posix.Types.ProcessID>_N)
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <System.Posix.Types.ProcessID>_N))
                       r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <System.Posix.Types.ProcessID>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(System.Posix.Types.ProcessID, XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                  ((dt12
                      `cast`
                    (Trans
                         (XMonad.Core.N:X[0] <()>_N)
                         (Control.Monad.Trans.Reader.N:ReaderT[0]
                              <*>_N
                              <XMonad.Core.XConf>_R
                              <Control.Monad.Trans.State.Lazy.StateT
                                 XMonad.Core.XState GHC.Types.IO>_R
                              <()>_N))
                      wild)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild1 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                    ipv } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
839fe5d810ab041ad2d67c83851e071d
  rawKeys84 :: XMonad.Core.X System.Posix.Types.ProcessID
  {- Unfolding: (XMonad.Core.xfork
                   @ XMonad.Core.X
                   XMonad.Core.$fMonadIOX
                   XMonad.My.Keys.rawKeys85
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R))) -}
656017de4cb03066723b042958970a3a
  rawKeys85 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (System.Posix.Process.executeFile1
                   @ ()
                   XMonad.Core.spawnPID2
                   GHC.Types.False
                   XMonad.My.Keys.rawKeys86
                   (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])) -}
f879914db93cec420fdb76924a5d0df3
  rawKeys86 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.Core.spawnPID1
                   XMonad.My.Keys.rawKeys87) -}
6d0bef68a17c66199a2dd9c93337372e
  rawKeys87 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   XMonad.My.Keys.rawKeys88
                   (GHC.Types.[] @ GHC.Base.String)) -}
883ff97a77b2413c394389fa484cb934
  rawKeys88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "er soft"#) -}
8437d18cc7844ebcbbd85d6558939d80
  rawKeys89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "<XF86AudioLowerVolume>"#) -}
599a0e096ddd5e888b86e78d818d3d6e
  rawKeys9 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys82
                   XMonad.My.Keys.rawKeys10) -}
ba6b8fb3fdbbe318aeb2cf8382a05eb0
  rawKeys90 ::
    XMonad.Core.XConfig XMonad.Core.Layout
    -> [(GHC.Base.String, XMonad.Core.X ())]
  {- Arity: 1,
     Strictness: <L,1*U(A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: XMonad.Core.XConfig XMonad.Core.Layout) ->
                 case XMonad.My.Keys.$wlvl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (GHC.Base.String, XMonad.Core.X ()) ww1 ww2 }) -}
c67d5e3c95c0fa92d1fb9f1557ef1020
  rawKeys91 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys143
                   XMonad.My.Keys.rawKeys92) -}
5035318b2a341c486fc97c06e1d3c90d
  rawKeys92 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys141
                   XMonad.My.Keys.rawKeys93) -}
77409a6577d35d236cb73d1d1ac03564
  rawKeys93 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys138
                   XMonad.My.Keys.rawKeys94) -}
068868be98fb889e0f8712fde3906cbd
  rawKeys94 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys135
                   XMonad.My.Keys.rawKeys95) -}
02508951004afc6ed98fced1fd817204
  rawKeys95 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys132
                   XMonad.My.Keys.rawKeys96) -}
3579eec9dc740ba2455b3655d880e534
  rawKeys96 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys129
                   XMonad.My.Keys.rawKeys97) -}
e3e60a12b26c9df3cbe5edca031d3429
  rawKeys97 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys125
                   XMonad.My.Keys.rawKeys98) -}
338c3fb428c63cec5f2495c9a5dabd0b
  rawKeys98 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys121
                   XMonad.My.Keys.rawKeys99) -}
2b6297610669cb5696d90d79814893d5
  rawKeys99 :: [(GHC.Base.String, XMonad.Core.X ())]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, XMonad.Core.X ())
                   XMonad.My.Keys.rawKeys118
                   XMonad.My.Keys.rawKeys100) -}
5ef4ee1bf72ea11c64d0543f69c1733b
  rawKeys_go :: GHC.Prim.Int# -> [XMonad.Core.X ()]
  {- Arity: 1, Strictness: <L,U> -}
c92fdc906497e4d878e4d2170541a6cc
  rawKeys_go1 :: GHC.Integer.Type.Integer -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U> -}
4fdb26e75f8bcebeebec299c6bd6dc9b
  rawKeys_xs ::
    [[GHC.Types.Char]]
    -> [XMonad.Core.X ()] -> [([GHC.Types.Char], XMonad.Core.X ())]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

