
==================== FINAL INTERFACE ====================
2017-01-08 01:41:18.669318191 UTC

interface xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv:XMonad.My.Hooks 8001
  interface hash: 76c2e80afe325084b5675480851d8558
  ABI hash: 2e76dfa74a852bb45697b6557faf083d
  export-list hash: d7670de1601f3823bb0e895d78e4f39f
  orphan hash: 833fcf39c7c9a20e58bf314bb1fcb13d
  flag hash: 4a75c4e57dd2ac4b9cd7e9d030ab3862
  sig of: Nothing
  used TH splices: False
  where
exports:
  XMonad.My.Hooks.handleEventHook
  XMonad.My.Hooks.logHook
  XMonad.My.Hooks.manageHook
  XMonad.My.Hooks.startupHook
module dependencies: XMonad.Hooks.ToggleFade XMonad.My.Commands
                     XMonad.My.Helpers XMonad.My.Log XMonad.My.Theme
                     XMonad.Util.Lemonbar XMonad.Util.XResources
package dependencies: X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL
                      X11-xft-0.3.1@X11-xft-0.3.1-K5aCxhr7PdkBJ0izTORldG
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-0.7.1.1@data-default-0.7.1.1-5uix4eIzBY9IcVb4V2HbW3
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-FYQpjIylblBDctdkHAFeXA
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      extensible-exceptions-0.1.1.4@extensible-exceptions-0.1.1.4-3h0ykvvAO915cRhUyj3rRV
                      filepath-1.4.1.0@filepath-1.4.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      old-time-1.1.0.3@old-time-1.1.0.3-IcvdkJUsE9M8t3io8peAEp
                      process-1.4.2.0@process-1.4.2.0
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      setlocale-1.0.0.4@setlocale-1.0.0.4-EUtO5CfNQTBH7QTFQEDDaI
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI
                      xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84:Data.Default.Instances.OldLocale
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Config
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Xlib.Extras 15edfc8bcdc8f89eda1d60b359296bec
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad b456b70eb07734470cc1ac0ec218c4da
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Core 914c546ed1a79c78146a872883560c01
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.ManageHook cefc3fffee7a6304c5b122c76de1b6e3
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.GroupNavigation 6057851573924919ae79aa898567fbc7
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.DynamicLog 1dd559bcd58af255db05718545088b65
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.EwmhDesktops 527b98639d7388a773f68a4fa2cd732b
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.InsertPosition b97830bf27aa640ec3a4e4525d59e2ff
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.ManageDocks 146352bec7f40335722c16e6f54069eb
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.ManageHelpers 0566d89acbcdcef968cd0158629cfeda
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.PositionStoreHooks 9d940620711b102338decb41cf81ff7e
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Hooks.ServerMode 5e8505aeb08090080963d968c80a8546
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.SpawnNamedPipe c46ef2aa792b0724181d15db6dd94f8e
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.SpawnOnce 5d7b3ebde30f36af49c8d5c45fa2fb6c
import  -/  XMonad.Hooks.ToggleFade 067315808740ada1c752c88a6c41f0f3
  exports: 96db371ccb91a3332a2d88544478819b
  toggleFadeLogHook e048ceb7afa79c10e8b42cf985118804
import  -/  XMonad.My.Commands 7f938da6e0a1c6ef8641b41501e4845b
  exports: e359ebeda1aa981e7c8bc0151d9fa46f
  commands ac45a34e6e0341e0f5cf046586ea55f4
import  -/  XMonad.My.Helpers 9ababd7c5a43ad4f8ace5924095d5f33
  exports: 335baffbbb24801c8a2829ffa0fb0425
  lemonbar 6827522d86174ce50a8849266a59181a
  setFullscreenSupported 44987940940737d687f7bf283632bafa
import  -/  XMonad.My.Log abdee42bed95f99b4032f32551ccffe4
  exports: 2e0966f20237873fd0b69d50d06df5a2
  panel 3904a0197ecf8af0a4952bc6a087e8c0
b95a95b50e68bbf71021dcc40e15ed13
  $s$fMonoid(->)_$s$fMonoidX ::
    GHC.Base.Monoid (XMonad.Core.X Data.Monoid.All)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (XMonad.Core.X Data.Monoid.All)
                  (XMonad.Core.$fMonoidX_$cmempty
                     @ Data.Monoid.All
                     Data.Monoid.$fMonoidAll)
                  (XMonad.Core.$fMonoidX_$cmappend
                     @ Data.Monoid.All
                     Data.Monoid.$fMonoidAll)
                  (XMonad.Core.$fMonoidX_$cmconcat
                     @ Data.Monoid.All
                     Data.Monoid.$fMonoidAll) -}
a420eecbe56b3fc0c9ecc66c3ddc5290
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   XMonad.My.Hooks.$trModule2
                   XMonad.My.Hooks.$trModule1) -}
48eced62954062e5e1125a0ed02e5741
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMonad.My.Hooks"#) -}
b9ef61a19b60a82f556fa393b34ba08f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv"#) -}
3a7220426b843675e5019e57c000be8a
  $weta ::
    GHC.Prim.Word#
    -> GHC.Prim.Addr#
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4, Strictness: <S,U><S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Addr#)
                   (w :: XMonad.Core.XState)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.X11.Xlib.Extras.$wgetClassHint
                        ww1
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { Graphics.X11.Xlib.Extras.ClassHint ds2 ds3 ->
                 case GHC.Base.eqString ds3 XMonad.My.Hooks.manageHook_x of wild2 {
                   GHC.Types.False
                   -> (# ipv,
                         (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet), w) #)
                   GHC.Types.True
                   -> case XMonad.Hooks.InsertPosition.$winsertPosition
                             XMonad.Hooks.InsertPosition.Below
                             XMonad.Hooks.InsertPosition.Newer
                             (GHC.Word.W64# ww)
                             w
                             ipv of ds { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         (GHC.Base.Just
                            @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                            (case ipv3 of wild3 { (,) a2 s'1 -> a2 }),
                          case ipv3 of wild3 { (,) a2 s'1 -> s'1 }) #) } } } }) -}
7e49ed7e6f1d9703dadf131ba69bb658
  handleEventHook ::
    Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All
  {- Arity: 1,
     Unfolding: (GHC.Base.$fMonoid(->)_$cmconcat
                   @ (XMonad.Core.X Data.Monoid.All)
                   @ Graphics.X11.Xlib.Extras.Event
                   XMonad.My.Hooks.$s$fMonoid(->)_$s$fMonoidX
                   XMonad.My.Hooks.handleEventHook1) -}
b19b03a704e83a49d212249d02af3c2a
  handleEventHook1 ::
    [Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All)
                   XMonad.Hooks.ManageDocks.docks3
                     `cast`
                   (<Graphics.X11.Xlib.Extras.Event>_R
                    ->_R Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <Data.Monoid.All>_N))
                             (Sym (XMonad.Core.N:X[0]) <Data.Monoid.All>_N))
                   XMonad.My.Hooks.handleEventHook2) -}
2452402ca5589b7a3798aa931acc5fd1
  handleEventHook2 ::
    [Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All)
                   XMonad.My.Hooks.handleEventHook5
                   XMonad.My.Hooks.handleEventHook3) -}
b84b810f5f6f93c361671476c4fde848
  handleEventHook3 ::
    [Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All)
                   XMonad.Hooks.EwmhDesktops.fullscreenEventHook1
                     `cast`
                   (<Graphics.X11.Xlib.Extras.Event>_R
                    ->_R Trans
                             (<XMonad.Core.XConf>_R
                              ->_R Trans
                                       (<XMonad.Core.XState>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(Data.Monoid.All, XMonad.Core.XState)>_R))
                                       (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                 <XMonad.Core.XState>_N
                                                 <GHC.Types.IO>_R
                                                 <Data.Monoid.All>_N)))
                             (Trans
                                  (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                            <*>_N
                                            <XMonad.Core.XConf>_R
                                            <Control.Monad.Trans.State.Lazy.StateT
                                               XMonad.Core.XState GHC.Types.IO>_R
                                            <Data.Monoid.All>_N))
                                  (Sym (XMonad.Core.N:X[0]) <Data.Monoid.All>_N)))
                   XMonad.My.Hooks.handleEventHook4) -}
2856c4f6f3d4e38f02ef9b32ee1e4071
  handleEventHook4 ::
    [Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All)
                   XMonad.Hooks.PositionStoreHooks.positionStoreEventHook1
                     `cast`
                   (<Graphics.X11.Xlib.Extras.Event>_R
                    ->_R Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <Data.Monoid.All>_N))
                             (Sym (XMonad.Core.N:X[0]) <Data.Monoid.All>_N))
                   (GHC.Types.[]
                      @ (Graphics.X11.Xlib.Extras.Event
                         -> XMonad.Core.X Data.Monoid.All))) -}
b2055373e43fb2b64cde83ef24b32ac0
  handleEventHook5 ::
    Graphics.X11.Xlib.Extras.Event -> XMonad.Core.X Data.Monoid.All
  {- Arity: 1,
     Unfolding: (XMonad.Hooks.ServerMode.serverModeEventHookCmd'
                   XMonad.My.Commands.commands1
                     `cast`
                   (Trans
                        (<XMonad.Core.XConf>_R
                         ->_R Trans
                                  (<XMonad.Core.XState>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <([(GHC.Base.String, XMonad.Core.X ())],
                                                   XMonad.Core.XState)>_R))
                                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <XMonad.Core.XState>_N
                                            <GHC.Types.IO>_R
                                            <[(GHC.Base.String, XMonad.Core.X ())]>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <[(GHC.Base.String, XMonad.Core.X ())]>_N))
                             (Sym (XMonad.Core.N:X[0]) <[(GHC.Base.String,
                                                          XMonad.Core.X ())]>_N)))) -}
12a3c2e8624b80f604a21ae35b32bab0
  logHook :: XMonad.Core.X ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Hooks.logHook1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <XMonad.Core.XConf>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  XMonad.Core.XState GHC.Types.IO>_R
                               <()>_N))
                     (Sym (XMonad.Core.N:X[0]) <()>_N)) -}
fadc66547bf704c5f2b4d648448ce75b
  logHook1 ::
    XMonad.Core.XConf
    -> Control.Monad.Trans.State.Lazy.StateT
         XMonad.Core.XState GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (r1 :: XMonad.Core.XConf) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           XMonad.Core.XState GHC.Types.IO ()
                   = XMonad.Actions.GroupNavigation.historyHook1 r1
                 } in
                 (\ (s1 :: XMonad.Core.XState)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case XMonad.Hooks.ToggleFade.toggleFadeLogHook1
                         XMonad.My.Hooks.logHook3
                         r1
                         (case ipv1 of wild { (,) a1 s' -> s' })
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case ((XMonad.Util.SpawnNamedPipe.getNamedPipe_x
                           `cast`
                         (Trans
                              (XMonad.Core.N:X[0] <XMonad.Util.SpawnNamedPipe.NamedPipes>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <XMonad.Core.XConf>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      XMonad.Core.XState GHC.Types.IO>_R
                                   <XMonad.Util.SpawnNamedPipe.NamedPipes>_N))
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N
                             <GHC.Types.IO>_R
                             <XMonad.Util.SpawnNamedPipe.NamedPipes>_N)
                          (case ipv3 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(XMonad.Util.SpawnNamedPipe.NamedPipes, XMonad.Core.XState)>_R)
                         ipv2 of ds { (#,#) ipv4 ipv5 ->
                  let {
                    h :: GHC.Base.Maybe GHC.IO.Handle.Types.Handle
                    = case ipv5 of wild { (,) a1 s' ->
                      case a1 of wild1 { XMonad.Util.SpawnNamedPipe.NamedPipes ds3 ->
                      XMonad.Util.SpawnNamedPipe.$slookup1
                        @ GHC.IO.Handle.Types.Handle
                        XMonad.My.Hooks.logHook2
                        ds3 } }
                  } in
                  case (((XMonad.Hooks.DynamicLog.dynamicLogString
                            (XMonad.Hooks.DynamicLog.PP
                               XMonad.My.Log.panel15
                               XMonad.My.Log.panel14
                               XMonad.My.Log.panel13
                               XMonad.My.Log.panel12
                               XMonad.My.Log.panel10
                               (GHC.Types.[] @ GHC.Types.Char)
                               (GHC.Types.[] @ GHC.Types.Char)
                               XMonad.My.Log.panel9
                               XMonad.Hooks.DynamicLog.defaultPP1
                               XMonad.My.Log.panel4
                               XMonad.My.Log.panel2
                               XMonad.Actions.DynamicWorkspaceOrder.getSortByOrder1
                                 `cast`
                               (Trans
                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                              <*>_N
                                              <XMonad.Core.XConf>_R
                                              <Control.Monad.Trans.State.Lazy.StateT
                                                 XMonad.Core.XState GHC.Types.IO>_R
                                              <XMonad.Util.WorkspaceCompare.WorkspaceSort>_N))
                                    (Sym (XMonad.Core.N:X[0]) <XMonad.Util.WorkspaceCompare.WorkspaceSort>_N))
                               XMonad.My.Log.loggers
                               (case h of wild {
                                  GHC.Base.Nothing
                                  -> XMonad.My.Log.panel1
                                       `cast`
                                     (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                  GHC.Base.Just x
                                  -> (GHC.IO.Handle.Text.hPutStrLn1 x)
                                       `cast`
                                     (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) })))
                           `cast`
                         (Trans
                              (XMonad.Core.N:X[0] <GHC.Base.String>_N)
                              (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <XMonad.Core.XConf>_R
                                   <Control.Monad.Trans.State.Lazy.StateT
                                      XMonad.Core.XState GHC.Types.IO>_R
                                   <GHC.Base.String>_N))
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <XMonad.Core.XState>_N <GHC.Types.IO>_R <GHC.Base.String>_N)
                          (case ipv5 of wild { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(GHC.Base.String, XMonad.Core.XState)>_R)
                         ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                  case h of wild {
                    GHC.Base.Nothing
                    -> (# ipv6,
                          (GHC.Tuple.(), case ipv7 of wild1 { (,) a1 s' -> s' }) #)
                    GHC.Base.Just x
                    -> case GHC.IO.Handle.Text.hPutStr2
                              x
                              (case ipv7 of wild1 { (,) a1 s' -> a1 })
                              GHC.Types.True
                              ipv6 of ds15 { (#,#) ipv8 ipv9 ->
                       (# ipv8,
                          (GHC.Tuple.(),
                           case ipv7 of wild1 { (,) a1 s' -> s' }) #) } } } } } })
                   `cast`
                 (Trans
                      (<XMonad.Core.XState>_R
                       ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                      (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))) -}
d9bb42816868b9abcbf1f2a0c935b16b
  logHook2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xpanel"#) -}
a13f2b3463ea3c8bd447df0a9d97d50d
  logHook3 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   XMonad.My.Hooks.logHook5
                   XMonad.My.Hooks.logHook4) -}
963562046a7130d6eb7fccb23301a31c
  logHook4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
f95e21562e12199d02a514cb8f45ff37
  logHook5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
f5567580e4c258b68dc1903cbc758d62
  manageHook :: XMonad.Core.ManageHook
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Hooks.manageHook1
                  `cast`
                (Trans
                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Graphics.X11.Types.Window>_R
                               <XMonad.Core.X>_R
                               <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                     (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                      XMonad.Core.WindowSet>_N)) -}
c85e424db1744d4de3a9ef21a1061b5f
  manageHook1 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.X (Data.Monoid.Endo XMonad.Core.WindowSet)
  {- Arity: 1,
     Unfolding: (XMonad.Core.$fMonoidQuery1
                   @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                   (Data.Monoid.$fMonoidEndo
                      @ (XMonad.StackSet.StackSet
                           XMonad.Core.WorkspaceId
                           (XMonad.Core.Layout Graphics.X11.Types.Window)
                           Graphics.X11.Types.Window
                           XMonad.Core.ScreenId
                           XMonad.Core.ScreenDetail))
                   XMonad.My.Hooks.manageHook2) -}
5de5aad6627f11a2b63163af33eb8326
  manageHook10 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.Hooks.ManageHelpers.transience1
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook11) -}
93fd1e2d267ca262e8e4af3e84499980
  manageHook11 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook14
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook12) -}
d2db567a754944ed9d909cf8ca9c4bc0
  manageHook12 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook13
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   (GHC.Types.[] @ XMonad.Hooks.ManageHelpers.MaybeManageHook)) -}
f64e0f1d3d1eea28f960e2fe050f15c4
  manageHook13 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4, Strictness: <L,U(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta :: Graphics.X11.Types.Window)
                   (r1 :: XMonad.Core.XConf)
                   (s1 :: XMonad.Core.XState)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.Hooks.InsertPosition.$winsertPosition
                        XMonad.Hooks.InsertPosition.Above
                        XMonad.Hooks.InsertPosition.Newer
                        eta
                        s1
                        s of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (GHC.Base.Just
                       @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                       (case ipv3 of wild2 { (,) a2 s'1 -> a2 }),
                     case ipv3 of wild2 { (,) a2 s'1 -> s'1 }) #) }) -}
26f41aa425168e3d759188e26b68a6d0
  manageHook14 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <S(S),1*U(U)><S(S(S)LLLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Graphics.X11.Types.Window)
                   (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Word.W64# ww1 ->
                 case w1 of ww2 { XMonad.Core.XConf ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ->
                 case ww3
                        `cast`
                      (Graphics.X11.Xlib.Types.N:Display[0]) of ww30 { GHC.Ptr.Ptr ww31 ->
                 XMonad.My.Hooks.$weta ww1 ww31 w2 w3 } } }) -}
c4351af9dbb8de8855ab8a0f02fca522
  manageHook15 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <S(S),1*U(U)><S(S(S)SSSSSSSLSSLSSSSLLSLLLSSSSS),1*U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Graphics.X11.Types.Window)
                   (w1 :: XMonad.Core.XConf)
                   (w2 :: XMonad.Core.XState)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { GHC.Word.W64# ww1 ->
                 case w1 of ww2 { XMonad.Core.XConf ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ->
                 case ww3
                        `cast`
                      (Graphics.X11.Xlib.Types.N:Display[0]) of ww30 { GHC.Ptr.Ptr ww31 ->
                 case Graphics.X11.Xlib.Extras.$wgetClassHint
                        ww31
                        ww1
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { Graphics.X11.Xlib.Extras.ClassHint ds2 ds3 ->
                 case GHC.Base.eqString ds3 XMonad.My.Hooks.manageHook_x1 of wild2 {
                   GHC.Types.False
                   -> (# ipv,
                         (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                          w2) #)
                   GHC.Types.True
                   -> case (((XMonad.Hooks.ManageHelpers.doCenterFloat2
                                XMonad.Hooks.ManageHelpers.C
                                (GHC.Word.W64# ww1))
                               `cast`
                             (Trans
                                  (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                               (XMonad.Core.XConf
                                  (GHC.Ptr.Ptr @ Graphics.X11.Xlib.Types.Display ww31)
                                    `cast`
                                  (Sym (Graphics.X11.Xlib.Types.N:Display[0]))
                                  ww4
                                  ww5
                                  ww6
                                  ww7
                                  ww8
                                  ww9
                                  ww10
                                  ww11
                                  ww12
                                  ww13
                                  ww14
                                  ww15
                                  ww16
                                  ww17
                                  ww18
                                  ww19
                                  ww20
                                  ww21
                                  ww22
                                  ww23
                                  ww24
                                  ww25
                                  ww26
                                  ww27
                                  ww28
                                  ww29))
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <XMonad.Core.XState>_N
                                 <GHC.Types.IO>_R
                                 <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                              w2)
                             `cast`
                           (GHC.Types.N:IO[0]
                                <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                             ipv of ds { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         (GHC.Base.Just
                            @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                            (case ipv3 of wild3 { (,) a2 s'1 -> a2 }),
                          case ipv3 of wild3 { (,) a2 s'1 -> s'1 }) #) } } } } } } }) -}
e93aaaeff38b9a1ca38a0fd794ac95ae
  manageHook16 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: (\ (eta :: Graphics.X11.Types.Window)
                   (eta1 :: XMonad.Core.XConf)
                   (eta2 :: XMonad.Core.XState)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.Hooks.ManageHelpers.isDialog4
                        XMonad.Hooks.ManageHelpers.isDialog3
                        XMonad.Hooks.ManageHelpers.isDialog2
                        eta
                        eta1
                        eta2
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 {
                   GHC.Types.False
                   -> (# ipv,
                         (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                          s') #)
                   GHC.Types.True
                   -> case (((XMonad.Hooks.ManageHelpers.doCenterFloat2
                                XMonad.Hooks.ManageHelpers.C
                                eta)
                               `cast`
                             (Trans
                                  (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <XMonad.Core.XConf>_R
                                       <Control.Monad.Trans.State.Lazy.StateT
                                          XMonad.Core.XState GHC.Types.IO>_R
                                       <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                               eta1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <XMonad.Core.XState>_N
                                 <GHC.Types.IO>_R
                                 <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                              s')
                             `cast`
                           (GHC.Types.N:IO[0]
                                <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                             ipv of ds { (#,#) ipv2 ipv3 ->
                      (# ipv2,
                         (GHC.Base.Just
                            @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                            (case ipv3 of wild2 { (,) a2 s'1 -> a2 }),
                          case ipv3 of wild2 { (,) a2 s'1 -> s'1 }) #) } } } }) -}
2a0d24a11b4501115ea03ff264162a4d
  manageHook17 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: (\ (eta :: Graphics.X11.Types.Window)
                   (eta1 :: XMonad.Core.XConf)
                   (eta2 :: XMonad.Core.XState)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.ManageHook.getStringProperty1
                        (case eta1 of wild { XMonad.Core.XConf ds4 dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 ds5 ds6 ds7 ds8 ds9 ->
                         ds4 })
                        eta
                        XMonad.My.Hooks.manageHook_p
                        eta1
                        eta2
                        eta3 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
                                XMonad.Core.XState) #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case (((XMonad.Hooks.ManageHelpers.doCenterFloat2
                               XMonad.Hooks.ManageHelpers.C
                               eta)
                              `cast`
                            (Trans
                                 (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                              eta1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N
                                <GHC.Types.IO>_R
                                <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                             s')
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                            ipv of ds1 { (#,#) ipv2 ipv3 ->
                     (# ipv2,
                        (GHC.Base.Just
                           @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                           (case ipv3 of wild2 { (,) a2 s'1 -> a2 }),
                         case ipv3 of wild2 { (,) a2 s'1 -> s'1 }) #) }
                 } in
                 case a1 of wild1 {
                   GHC.Base.Nothing
                   -> case XMonad.My.Hooks.manageHook18 of wild2 {
                        GHC.Types.False
                        -> (# ipv,
                              (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                               s') #)
                        GHC.Types.True -> $j GHC.Prim.void# }
                   GHC.Base.Just v
                   -> case GHC.Base.eqString
                             v
                             XMonad.My.Hooks.manageHook_x2 of wild2 {
                        GHC.Types.False
                        -> (# ipv,
                              (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                               s') #)
                        GHC.Types.True -> $j GHC.Prim.void# } } } }) -}
3391e1065d4f049657ffd0495882b624
  manageHook18 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   (GHC.Types.[] @ GHC.Types.Char)
                   XMonad.My.Hooks.manageHook_x2) -}
e476e6b51c7ced794d4c4e3558e0ac02
  manageHook19 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: (\ (eta :: Graphics.X11.Types.Window)
                   (eta1 :: XMonad.Core.XConf)
                   (eta2 :: XMonad.Core.XState)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.ManageHook.getStringProperty1
                        (case eta1 of wild { XMonad.Core.XConf ds4 dt dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 ds5 ds6 ds7 ds8 ds9 ->
                         ds4 })
                        eta
                        XMonad.My.Hooks.manageHook_p
                        eta1
                        eta2
                        eta3 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
                                XMonad.Core.XState) #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     case (((XMonad.Hooks.ManageHelpers.doCenterFloat2
                               XMonad.Hooks.ManageHelpers.C
                               eta)
                              `cast`
                            (Trans
                                 (XMonad.Core.N:X[0] <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                                      <*>_N
                                      <XMonad.Core.XConf>_R
                                      <Control.Monad.Trans.State.Lazy.StateT
                                         XMonad.Core.XState GHC.Types.IO>_R
                                      <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                              eta1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <XMonad.Core.XState>_N
                                <GHC.Types.IO>_R
                                <Data.Monoid.Endo XMonad.Core.WindowSet>_N)
                             s')
                            `cast`
                          (GHC.Types.N:IO[0]
                               <(Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState)>_R)
                            ipv of ds1 { (#,#) ipv2 ipv3 ->
                     (# ipv2,
                        (GHC.Base.Just
                           @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                           (case ipv3 of wild2 { (,) a2 s'1 -> a2 }),
                         case ipv3 of wild2 { (,) a2 s'1 -> s'1 }) #) }
                 } in
                 case a1 of wild1 {
                   GHC.Base.Nothing
                   -> case XMonad.My.Hooks.manageHook20 of wild2 {
                        GHC.Types.False
                        -> (# ipv,
                              (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                               s') #)
                        GHC.Types.True -> $j GHC.Prim.void# }
                   GHC.Base.Just v
                   -> case GHC.Base.eqString
                             v
                             XMonad.My.Hooks.manageHook_x3 of wild2 {
                        GHC.Types.False
                        -> (# ipv,
                              (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                               s') #)
                        GHC.Types.True -> $j GHC.Prim.void# } } } }) -}
68136e040757903e73ebdf944b00f934
  manageHook2 :: [XMonad.Core.ManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Core.ManageHook
                   XMonad.Hooks.ManageDocks.docks4
                     `cast`
                   (Trans
                        (<GHC.Word.Word64>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo XMonad.Core.WindowSet,
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo XMonad.Core.WindowSet>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    XMonad.Core.WindowSet>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <GHC.Word.Word64>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              XMonad.Core.WindowSet>_N)))
                   XMonad.My.Hooks.manageHook3) -}
f13b3f10630bdeec21cac73374d2d03b
  manageHook20 :: GHC.Types.Bool
  {- Unfolding: (GHC.Base.eqString
                   (GHC.Types.[] @ GHC.Types.Char)
                   XMonad.My.Hooks.manageHook_x3) -}
d9331097bed2ff31ff2513665e8a1748
  manageHook21 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet),
           XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (eta :: Graphics.X11.Types.Window)
                   (eta1 :: XMonad.Core.XConf)
                   (eta2 :: XMonad.Core.XState)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.Hooks.ManageHelpers.isDialog4
                        XMonad.Hooks.ManageHelpers.isFullscreen3
                        XMonad.Hooks.ManageHelpers.isFullscreen2
                        eta
                        eta1
                        eta2
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 {
                   GHC.Types.False
                   -> (# ipv,
                         (GHC.Base.Nothing @ (Data.Monoid.Endo XMonad.Core.WindowSet),
                          s') #)
                   GHC.Types.True
                   -> (# ipv,
                         (GHC.Base.Just
                            @ (Data.Monoid.Endo XMonad.Core.WindowSet)
                            (\ (s1 :: XMonad.StackSet.StackSet
                                        XMonad.Core.WorkspaceId
                                        (XMonad.Core.Layout Graphics.X11.Types.Window)
                                        Graphics.X11.Types.Window
                                        XMonad.Core.ScreenId
                                        XMonad.Core.ScreenDetail) ->
                             case s1 of wild2 { XMonad.StackSet.StackSet dt dt1 dt2 dt3 dt4 ds ds2 ds3 ->
                             XMonad.StackSet.StackSet
                               @ XMonad.Core.WorkspaceId
                               @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                               @ Graphics.X11.Types.Window
                               @ XMonad.Core.ScreenId
                               @ XMonad.Core.ScreenDetail
                               dt
                               dt1
                               dt2
                               dt3
                               dt4
                               ds
                               ds2
                               (case eta of ww { GHC.Word.W64# ww1 ->
                                XMonad.Hooks.ManageHelpers.$w$sgo1
                                  @ XMonad.StackSet.RationalRect
                                  ww1
                                  XMonad.Hooks.ManageHelpers.doFullFloat2
                                  ds3 }) })
                              `cast`
                            (Sym (Data.Monoid.N:Endo[0]
                                      <XMonad.StackSet.StackSet
                                         XMonad.Core.WorkspaceId
                                         (XMonad.Core.Layout Graphics.X11.Types.Window)
                                         Graphics.X11.Types.Window
                                         XMonad.Core.ScreenId
                                         XMonad.Core.ScreenDetail>_R)),
                          s') #) } } }) -}
1ec94a6248ab5f34a291208c5f189c36
  manageHook22 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Monoid.Endo XMonad.Core.WindowSet, XMonad.Core.XState) #)
  {- Arity: 4,
     Unfolding: (XMonad.Hooks.PositionStoreHooks.positionStoreManageHook1
                   (GHC.Base.Nothing @ XMonad.Layout.Decoration.Theme)) -}
6207459eca5f1af92b88f3bf60963842
  manageHook3 :: [XMonad.Core.ManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Core.ManageHook
                   XMonad.My.Hooks.manageHook22
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(Data.Monoid.Endo XMonad.Core.WindowSet,
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <Data.Monoid.Endo XMonad.Core.WindowSet>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                                       (Sym (XMonad.Core.N:X[0]) <Data.Monoid.Endo
                                                                    XMonad.Core.WindowSet>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                             (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                              XMonad.Core.WindowSet>_N)))
                   XMonad.My.Hooks.manageHook4) -}
831030d6e3acd8d5ea4c842ad3602ad6
  manageHook4 :: [XMonad.Core.ManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Core.ManageHook
                   XMonad.My.Hooks.manageHook5
                     `cast`
                   (Trans
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Graphics.X11.Types.Window>_R
                                  <XMonad.Core.X>_R
                                  <Data.Monoid.Endo XMonad.Core.WindowSet>_N))
                        (Sym (XMonad.Core.N:Query[0]) <Data.Monoid.Endo
                                                         XMonad.Core.WindowSet>_N))
                   (GHC.Types.[] @ XMonad.Core.ManageHook)) -}
9016d1038230473a18f0cd64e6dd28ac
  manageHook5 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.X (Data.Monoid.Endo XMonad.Core.WindowSet)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta1 :: Graphics.X11.Types.Window) ->
                 XMonad.Hooks.ManageHelpers.composeOne2
                   XMonad.My.Hooks.manageHook_eta
                   eta1) -}
1e3796ed8d8b4f70a000679c92b51865
  manageHook6 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook19
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook7) -}
d797ff9aca6684b94c31cb095f28428d
  manageHook7 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook17
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook8) -}
52a24a07db5ee19fd69d27b1ba07072e
  manageHook8 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook16
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook9) -}
7423e4fbf3a445faaeab25ce33db7381
  manageHook9 :: [XMonad.Hooks.ManageHelpers.MaybeManageHook]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook15
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook10) -}
55a8f377195f8c8eb4eb70ca7c001c51
  manageHook_eta ::
    [XMonad.Core.Query
       (GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMonad.Hooks.ManageHelpers.MaybeManageHook
                   XMonad.My.Hooks.manageHook21
                     `cast`
                   (Trans
                        (<Graphics.X11.Types.Window>_R
                         ->_R Trans
                                  (<XMonad.Core.XConf>_R
                                   ->_R Trans
                                            (<XMonad.Core.XState>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <(GHC.Base.Maybe
                                                               (Data.Monoid.Endo
                                                                  XMonad.Core.WindowSet),
                                                             XMonad.Core.XState)>_R))
                                            (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                      <XMonad.Core.XState>_N
                                                      <GHC.Types.IO>_R
                                                      <GHC.Base.Maybe
                                                         (Data.Monoid.Endo
                                                            XMonad.Core.WindowSet)>_N)))
                                  (Trans
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N
                                                 <XMonad.Core.XConf>_R
                                                 <Control.Monad.Trans.State.Lazy.StateT
                                                    XMonad.Core.XState GHC.Types.IO>_R
                                                 <GHC.Base.Maybe
                                                    (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                                       (Sym (XMonad.Core.N:X[0]) <GHC.Base.Maybe
                                                                    (Data.Monoid.Endo
                                                                       XMonad.Core.WindowSet)>_N)))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <Graphics.X11.Types.Window>_R
                                       <XMonad.Core.X>_R
                                       <GHC.Base.Maybe (Data.Monoid.Endo XMonad.Core.WindowSet)>_N))
                             (Sym (XMonad.Core.N:Query[0]) <GHC.Base.Maybe
                                                              (Data.Monoid.Endo
                                                                 XMonad.Core.WindowSet)>_N)))
                   XMonad.My.Hooks.manageHook6) -}
170ed40cc707454173d9fb4913375510
  manageHook_p :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "WM_WINDOW_ROLE"#) -}
62e60cda4e73241979a96d9284c9d89c
  manageHook_x :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "URxvt"#) -}
0110f161d0d4fbfe30b79613adb3fa99
  manageHook_x1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "Xmessage"#) -}
847fbfbe14d4b1dcc5c27e6727f55656
  manageHook_x2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "GtkFileChooserDialog"#) -}
43815dfe7eed065a1f1b0aaf75995d77
  manageHook_x3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "pop-up"#) -}
e7db77c85e2a517f7ca0239d59a2e2d4
  startupHook :: XMonad.Core.X ()
  {- Arity: 3,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Hooks.startupHook1
                  `cast`
                (Trans
                     (<XMonad.Core.XConf>_R
                      ->_R Trans
                               (<XMonad.Core.XState>_R
                                ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <XMonad.Core.XConf>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       XMonad.Core.XState GHC.Types.IO>_R
                                    <()>_N))
                          (Sym (XMonad.Core.N:X[0]) <()>_N))) -}
fdf7fc683e1e86e1e380a43638bbf230
  startupHook1 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: XMonad.Core.XConf)
                   (eta :: XMonad.Core.XState)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.My.Helpers.setFullscreenSupported1
                        r1
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ((XMonad.My.Helpers.lemonbar
                          `cast`
                        (Trans
                             (XMonad.Core.N:X[0] <()>_N)
                             (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <XMonad.Core.XConf>_R
                                  <Control.Monad.Trans.State.Lazy.StateT
                                     XMonad.Core.XState GHC.Types.IO>_R
                                  <()>_N))
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                         (case ipv1 of wild { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 ((XMonad.My.Hooks.startupHook2
                     `cast`
                   (Trans
                        (XMonad.Core.N:X[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <XMonad.Core.XConf>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                XMonad.Core.XState GHC.Types.IO>_R
                             <()>_N))
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                    (case ipv3 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                   ipv2 } }) -}
a7e420b6686a946dc80c87e9e23b875e
  startupHook2 :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Util.SpawnOnce.spawnOnce
                   XMonad.My.Hooks.startupHook3) -}
38e7c50be439fbf7bd2ace245eec8b27
  startupHook3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xmonad-ticker.sh"#) -}
"SPEC/XMonad.My.Hooks $fMonoidX @ All" [ALWAYS] forall ($dMonoid :: GHC.Base.Monoid
                                                                      Data.Monoid.All)
  XMonad.Core.$fMonoidX @ Data.Monoid.All $dMonoid
  = XMonad.My.Hooks.$s$fMonoid(->)_$s$fMonoidX
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

