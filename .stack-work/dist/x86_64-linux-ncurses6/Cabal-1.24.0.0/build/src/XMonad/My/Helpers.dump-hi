
==================== FINAL INTERFACE ====================
2017-01-08 01:32:35.54242891 UTC

interface xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv:XMonad.My.Helpers 8001
  interface hash: 88b6ec6499f8b2ef0ec4391d3a2b1928
  ABI hash: 9ababd7c5a43ad4f8ace5924095d5f33
  export-list hash: 335baffbbb24801c8a2829ffa0fb0425
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4a75c4e57dd2ac4b9cd7e9d030ab3862
  sig of: Nothing
  used TH splices: False
  where
exports:
  XMonad.My.Helpers.lemonbar
  XMonad.My.Helpers.psPlace
  XMonad.My.Helpers.runLogHook
  XMonad.My.Helpers.setFullscreenSupported
  XMonad.My.Helpers.toggleFloat
module dependencies: XMonad.My.Theme XMonad.Util.XResources
package dependencies: X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      data-default-0.7.1.1@data-default-0.7.1.1-5uix4eIzBY9IcVb4V2HbW3
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-FYQpjIylblBDctdkHAFeXA
                      data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T
                      data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD
                      data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      extensible-exceptions-0.1.1.4@extensible-exceptions-0.1.1.4-3h0ykvvAO915cRhUyj3rRV
                      filepath-1.4.1.0@filepath-1.4.1.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      old-locale-1.0.0.7@old-locale-1.0.0.7-6glXNhHF891B41ZfuI8hU8
                      process-1.4.2.0@process-1.4.2.0
                      setlocale-1.0.0.4@setlocale-1.0.0.4-EUtO5CfNQTBH7QTFQEDDaI
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      unix-2.7.2.0@unix-2.7.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI
                      xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         data-default-instances-containers-0.0.1@data-default-instances-containers-0.0.1-B3LqdWnlDzL8N7WtQnkQ3T:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1@data-default-instances-dlist-0.0.1-7EnnOuRxBMR4O5lm1rpRqD:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1@data-default-instances-old-locale-0.0.1-LPOHPEJCJUa53W1ZYaHB84:Data.Default.Instances.OldLocale
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Config
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Types ceac75734ca8d1542c4af611b44f8f92
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Xlib.Atom 4f8dacec732f16db7267617baf02f947
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Xlib.Extras 15edfc8bcdc8f89eda1d60b359296bec
import  -/  X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL:Graphics.X11.Xlib.Types af258cd2fd84af11d980a4415f0279e5
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Functor 6fc476505db88d678632a4a838125f13
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 24b19ef74cea78e4c18332bed9f0491d
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Reader.Class a2c7beb266585be238cfe9f5989c52b7
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Class b303b4a4ee6363bc95266312b9afc751
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad b456b70eb07734470cc1ac0ec218c4da
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Core 914c546ed1a79c78146a872883560c01
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.Operations 61aad49a4ce0a738cfcad6fefc5578c5
import  -/  xmonad-0.12@xmonad-0.12-C7fwoSClEurF1iRX9ijBYI:XMonad.StackSet 324f0b7b5a144f5b8d7a533a68d8e72d
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Actions.FloatKeys fa5aaf257905110a1688578628d969c9
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.PositionStore 61c7347f9670679b0656af6f24de895b
import  -/  xmonad-contrib-0.12@xmonad-contrib-0.12-5yojTYrxlmNEezmwtDgaRd:XMonad.Util.SpawnNamedPipe c46ef2aa792b0724181d15db6dd94f8e
import  -/  XMonad.My.Theme a0e759d8d1a0e7cf28312a0dd0c84a89
  exports: 36250994ca13d4422ed3d62089b4a0b7
  normalBG 0583b11e086ae6034d02410a6a7a63cf
  normalFG 497dc942a662796c44447b53e2c325ad
  xfont ba85fc83ca88129e8cb7b3886133c4b1
02924e205a7fcde37dfcdfa28f8843e9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   XMonad.My.Helpers.$trModule2
                   XMonad.My.Helpers.$trModule1) -}
2b0dc403898e4af68ff710af6ec0fd2f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMonad.My.Helpers"#) -}
d425a71553b58a0a7312e7afe940cb21
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "xmonadrc-0.0.1.0-E6HMStyFiyjAVPFmc9oFTv"#) -}
d0282620ef2572f1420113fa018131e9
  $w$sgo10 ::
    GHC.Prim.Word#
    -> Data.Map.Base.Map Graphics.X11.Types.Window a1
    -> Data.Map.Base.Map Graphics.X11.Types.Window a1
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
3213bb708cdb1230b89466a2a3a34679
  $wpoly_go10 ::
    GHC.Prim.Word#
    -> Data.Map.Base.Map Graphics.X11.Types.Window a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
af0a0248fb92afe8160f40e0fccabb37
  $wtoggleFloat ::
    XMonad.Core.XConf
    -> XMonad.Core.WorkspaceId
    -> XMonad.Core.Layout Graphics.X11.Types.Window
    -> GHC.Base.Maybe (XMonad.StackSet.Stack Graphics.X11.Types.Window)
    -> XMonad.Core.ScreenId
    -> XMonad.Core.ScreenDetail
    -> [XMonad.StackSet.Screen
          XMonad.Core.WorkspaceId
          (XMonad.Core.Layout Graphics.X11.Types.Window)
          Graphics.X11.Types.Window
          XMonad.Core.ScreenId
          XMonad.Core.ScreenDetail]
    -> [XMonad.StackSet.Workspace
          XMonad.Core.WorkspaceId
          (XMonad.Core.Layout Graphics.X11.Types.Window)
          Graphics.X11.Types.Window]
    -> Data.Map.Base.Map
         Graphics.X11.Types.Window XMonad.StackSet.RationalRect
    -> Data.Set.Base.Set Graphics.X11.Types.Window
    -> Data.Map.Base.Map Graphics.X11.Types.Window GHC.Types.Int
    -> GHC.Base.Maybe
         (Graphics.X11.Xlib.Types.Position
          -> Graphics.X11.Xlib.Types.Position -> XMonad.Core.X (),
          XMonad.Core.X ())
    -> GHC.Prim.Word#
    -> Data.Map.Base.Map
         GHC.Base.String
         (Data.Either.Either GHC.Base.String XMonad.Core.StateExtension)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 15,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U><L,U><S,U><S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: XMonad.Core.XConf)
                   (ww :: XMonad.Core.WorkspaceId)
                   (ww1 :: XMonad.Core.Layout Graphics.X11.Types.Window)
                   (ww2 :: GHC.Base.Maybe
                             (XMonad.StackSet.Stack Graphics.X11.Types.Window))
                   (ww3 :: XMonad.Core.ScreenId)
                   (ww4 :: XMonad.Core.ScreenDetail)
                   (ww5 :: [XMonad.StackSet.Screen
                              XMonad.Core.WorkspaceId
                              (XMonad.Core.Layout Graphics.X11.Types.Window)
                              Graphics.X11.Types.Window
                              XMonad.Core.ScreenId
                              XMonad.Core.ScreenDetail])
                   (ww6 :: [XMonad.StackSet.Workspace
                              XMonad.Core.WorkspaceId
                              (XMonad.Core.Layout Graphics.X11.Types.Window)
                              Graphics.X11.Types.Window])
                   (ww7 :: Data.Map.Base.Map
                             Graphics.X11.Types.Window XMonad.StackSet.RationalRect)
                   (ww8 :: Data.Set.Base.Set Graphics.X11.Types.Window)
                   (ww9 :: Data.Map.Base.Map Graphics.X11.Types.Window GHC.Types.Int)
                   (ww10 :: GHC.Base.Maybe
                              (Graphics.X11.Xlib.Types.Position
                               -> Graphics.X11.Xlib.Types.Position -> XMonad.Core.X (),
                               XMonad.Core.X ()))
                   (ww11 :: GHC.Prim.Word#)
                   (ww12 :: Data.Map.Base.Map
                              GHC.Base.String
                              (Data.Either.Either GHC.Base.String XMonad.Core.StateExtension))
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ww2 of wild1 {
                   GHC.Base.Nothing
                   -> (# w1,
                         (GHC.Tuple.(),
                          XMonad.Core.XState
                            ww
                            ww1
                            (GHC.Base.Nothing
                               @ (XMonad.StackSet.Stack Graphics.X11.Types.Window))
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8
                            ww9
                            ww10
                            ww11
                            ww12) #)
                   GHC.Base.Just x
                   -> case x of wild2 { XMonad.StackSet.Stack ds3 ds1 ds2 ->
                      case ds3 of ww13 { GHC.Word.W64# ww14 ->
                      case XMonad.My.Helpers.$wpoly_go10
                             @ XMonad.StackSet.RationalRect
                             ww14
                             ww7 of wild {
                        GHC.Types.False
                        -> XMonad.My.Helpers.psPlace1
                             ww13
                             w
                             (XMonad.Core.XState
                                ww
                                ww1
                                wild1
                                ww3
                                ww4
                                ww5
                                ww6
                                ww7
                                ww8
                                ww9
                                ww10
                                ww11
                                ww12)
                             w1
                        GHC.Types.True
                        -> case w of ww15 { XMonad.Core.XConf ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ww34 ww35 ww36 ww37 ww38 ww39 ww40 ww41 ww42 ->
                           XMonad.Operations.$wwindows
                             (\ (s1 :: XMonad.StackSet.StackSet
                                         XMonad.Core.WorkspaceId
                                         (XMonad.Core.Layout Graphics.X11.Types.Window)
                                         Graphics.X11.Types.Window
                                         XMonad.Core.ScreenId
                                         XMonad.Core.ScreenDetail)[OneShot] ->
                              case s1 of wild4 { XMonad.StackSet.StackSet dt1 dt2 dt3 dt4 dt5 ds ds4 ds5 ->
                              XMonad.StackSet.StackSet
                                @ XMonad.Core.WorkspaceId
                                @ (XMonad.Core.Layout Graphics.X11.Types.Window)
                                @ Graphics.X11.Types.Window
                                @ XMonad.Core.ScreenId
                                @ XMonad.Core.ScreenDetail
                                dt1
                                dt2
                                dt3
                                dt4
                                dt5
                                ds
                                ds4
                                (XMonad.My.Helpers.$w$sgo10
                                   @ XMonad.StackSet.RationalRect
                                   ww14
                                   ds5) })
                             ww16
                             ww17
                             ww18
                             ww19
                             ww20
                             ww21
                             ww22
                             ww23
                             ww24
                             ww25
                             ww26
                             ww27
                             ww28
                             ww29
                             ww30
                             ww31
                             ww32
                             ww33
                             ww34
                             ww35
                             ww36
                             ww37
                             ww38
                             ww39
                             ww40
                             ww41
                             ww42
                             ww
                             ww1
                             wild1
                             ww3
                             ww4
                             ww5
                             ww6
                             ww7
                             ww8
                             ww9
                             ww10
                             ww11
                             ww12
                             w1 } } } } }) -}
6827522d86174ce50a8849266a59181a
  lemonbar :: XMonad.Core.X ()
  {- Unfolding: (XMonad.Util.SpawnNamedPipe.spawnNamedPipe
                   XMonad.My.Helpers.lemonbar2
                   XMonad.My.Helpers.lemonbar1) -}
1c37605f4dd41107f41e37263f359c28
  lemonbar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xpanel"#) -}
541094c8ec7d003bdb35e037f4a8c8b4
  lemonbar10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "| sh"#) -}
e1f4176e1392b69640d99b31340bbe21
  lemonbar11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-F '"#
                   XMonad.My.Helpers.lemonbar12) -}
147a42fdf02cfff08cc903141653fe4b
  lemonbar12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   XMonad.My.Theme.normalFG
                   XMonad.My.Helpers.lemonbar13) -}
06eee701a3c7ae6a45cc9ac1b02294d9
  lemonbar13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "'"#) -}
6ce192db4ef8ccdf13ad9d56f3fb42ab
  lemonbar14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-B '#88"#
                   XMonad.My.Helpers.lemonbar15) -}
175eb01f8e5fe583f1577373aec2450e
  lemonbar15 :: [GHC.Types.Char]
  {- Unfolding: (case XMonad.My.Theme.normalBG of wild {
                   [] -> case GHC.List.scanl2 ret_ty [GHC.Types.Char] of {}
                   : ds1 xs
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        xs
                        XMonad.My.Helpers.lemonbar13 }) -}
7b2a3442f335b31604ebbf323393bf47
  lemonbar16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-f '"#
                   XMonad.My.Helpers.lemonbar17) -}
62b5c171b854a0ba3206b98abd601fc7
  lemonbar17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   XMonad.My.Theme.xfont
                   XMonad.My.Helpers.lemonbar13) -}
a6a915fcd7ba478cb191f0c248cac9f2
  lemonbar18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-n xpanel"#) -}
9c36ae3d25953aec2f07d3cdda06fc3d
  lemonbar19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
5f346cc7e11cb2f5c94b980dcebfa533
  lemonbar2 :: [GHC.Types.Char]
  {- Unfolding: (XMonad.My.Helpers.lemonbar_go
                   XMonad.My.Helpers.lemonbar3) -}
25557a12d6d848ee76d3fb70c5fc72cf
  lemonbar20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lemonbar"#) -}
435ddc60f05dafc8bbce7d2e2e2b336f
  lemonbar3 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar20
                   XMonad.My.Helpers.lemonbar4) -}
c0db97db3c100a2a20a322ed2de13a2c
  lemonbar4 :: [[GHC.Types.Char]]
  {- Unfolding: (Data.OldList.prependToAll
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar19
                   XMonad.My.Helpers.lemonbar5) -}
0379913b129170a222ec5c848863cd1e
  lemonbar5 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar18
                   XMonad.My.Helpers.lemonbar6) -}
4dd89e3a91f599b48c19971b0725b72b
  lemonbar6 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar16
                   XMonad.My.Helpers.lemonbar7) -}
a78ba23dd3e060a6c480dcb44a552b64
  lemonbar7 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar14
                   XMonad.My.Helpers.lemonbar8) -}
7fa06f688c6ac957fc6a382c225025fa
  lemonbar8 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar11
                   XMonad.My.Helpers.lemonbar9) -}
80a6357df42bc681949c4ee0d5efe4a5
  lemonbar9 :: [[GHC.Types.Char]]
  {- Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   XMonad.My.Helpers.lemonbar10
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
996799c3bdfda706ef9de090f81e6704
  lemonbar_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
535049a39ef41bdbc39a8714df65052b
  psPlace :: Graphics.X11.Types.Window -> XMonad.Core.X ()
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Helpers.psPlace1
                  `cast`
                (<Graphics.X11.Types.Window>_R
                 ->_R Trans
                          (<XMonad.Core.XConf>_R
                           ->_R Trans
                                    (<XMonad.Core.XState>_R
                                     ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                                    (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                              <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <XMonad.Core.XConf>_R
                                         <Control.Monad.Trans.State.Lazy.StateT
                                            XMonad.Core.XState GHC.Types.IO>_R
                                         <()>_N))
                               (Sym (XMonad.Core.N:X[0]) <()>_N))) -}
143847f1d73e77a89b138680369e8968
  psPlace1 ::
    Graphics.X11.Types.Window
    -> XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U> -}
98df4f49fb4a763515f1acab44686906
  runLogHook :: XMonad.Core.X ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LSSSSSSSLSSLC(C(C(S)))SSSLLSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Helpers.runLogHook1
                  `cast`
                (Trans
                     (<XMonad.Core.XConf>_R
                      ->_R Trans
                               (<XMonad.Core.XState>_R
                                ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <XMonad.Core.XConf>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       XMonad.Core.XState GHC.Types.IO>_R
                                    <()>_N))
                          (Sym (XMonad.Core.N:X[0]) <()>_N))) -}
ab84de3a3b9cca359dc1e6668be2aafa
  runLogHook1 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LSSSSSSSLSSLC(C(C(S)))SSSLLSLLLSSSSS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: XMonad.Core.XConf)
                   (eta :: XMonad.Core.XState)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case r1 of wild { XMonad.Core.XConf ds5 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds6 ds7 ds8 ds9 ds10 ->
                 ((dt12
                     `cast`
                   (Trans
                        (XMonad.Core.N:X[0] <()>_N)
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <XMonad.Core.XConf>_R
                             <Control.Monad.Trans.State.Lazy.StateT
                                XMonad.Core.XState GHC.Types.IO>_R
                             <()>_N))
                     wild)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)
                    eta)
                   `cast`
                 (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R)
                   eta1 }) -}
44987940940737d687f7bf283632bafa
  setFullscreenSupported :: XMonad.Core.X ()
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Helpers.setFullscreenSupported1
                  `cast`
                (Trans
                     (<XMonad.Core.XConf>_R
                      ->_R Trans
                               (<XMonad.Core.XState>_R
                                ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <XMonad.Core.XConf>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       XMonad.Core.XState GHC.Types.IO>_R
                                    <()>_N))
                          (Sym (XMonad.Core.N:X[0]) <()>_N))) -}
72ba8430b8c653d328329522d1eb0d95
  setFullscreenSupported1 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,U(U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)><L,U><S,U>,
     Unfolding: (\ (r1 :: XMonad.Core.XConf)
                   (eta1 :: XMonad.Core.XState)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case XMonad.Core.atom_WM_DELETE_WINDOW3
                        XMonad.My.Helpers.setFullscreenSupported3
                        r1
                        eta1
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case XMonad.Core.atom_WM_DELETE_WINDOW3
                        XMonad.My.Helpers.setFullscreenSupported2
                        r1
                        (case ipv1 of wild { (,) a1 s' -> s' })
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case r1 of wild { XMonad.Core.XConf ds4 dt1 dt2 dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt12 dt13 dt14 dt15 dt16 dt17 dt18 dt19 dt20 dt21 ds5 ds6 ds7 ds8 ds9 ->
                 case ds4
                        `cast`
                      (Graphics.X11.Xlib.Types.N:Display[0]) of ww { GHC.Ptr.Ptr ww1 ->
                 case ipv1 of wild1 { (,) a1 s' ->
                 case a1 of ww2 { GHC.Word.W64# ww3 ->
                 case Graphics.X11.Xlib.Extras.$wrawGetWindowProperty
                        @ Foreign.C.Types.CLong
                        Foreign.C.Types.$fStorableCLong
                        Graphics.X11.Xlib.Extras.$fStorableTextProperty7
                        ww1
                        ww3
                        dt19
                        ipv2 of ds { (#,#) ipv4 ipv5 ->
                 let {
                   dat :: [Foreign.C.Types.CLong]
                   = Data.OldList.nubBy
                       @ Foreign.C.Types.CLong
                       GHC.Int.eqInt64
                         `cast`
                       (Sym (Foreign.C.Types.N:CLong[0])
                        ->_R Sym (Foreign.C.Types.N:CLong[0])
                        ->_R <GHC.Types.Bool>_R)
                       (GHC.Types.:
                          @ Foreign.C.Types.CLong
                          (case ipv3 of wild2 { (,) a2 s'1 ->
                           case a2 of wild3 { GHC.Word.W64# x# ->
                           (GHC.Int.I64# (GHC.Prim.word2Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CLong[0])) } })
                          (case ipv5 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.[] @ Foreign.C.Types.CLong
                             GHC.Base.Just x -> x }))
                 } in
                 case GHC.List.$wlenAcc
                        @ Foreign.C.Types.CLong
                        dat
                        0# of ww4 { DEFAULT ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.*# ww4 8#)
                        8#
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv7
                        ipv6 of ds10 { (#,#) ipv8 ipv9 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv9
                 } in
                 case Foreign.Marshal.Array.newArray2
                        @ Foreign.C.Types.CLong
                        Foreign.C.Types.$fStorableCLong
                        (GHC.Ptr.Ptr @ Foreign.C.Types.CLong ptr)
                        dat
                        ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                 case {__pkg_ccall X11-1.7@X11-1.7-5RhPpcHRMKqDNH6DKI6wnL XChangeProperty GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Word#
                                                                                          -> GHC.Prim.Word#
                                                                                          -> GHC.Prim.Word#
                                                                                          -> GHC.Prim.Int#
                                                                                          -> GHC.Prim.Int#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Int#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Int# #)}
                        ww1
                        dt19
                        ww3
                        4##
                        32#
                        0#
                        ptr
                        (GHC.Prim.narrow32Int# ww4)
                        ipv10 of wild2 { (#,#) ds13 ds14 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepUnlifted
                        @ GHC.Prim.ByteArray#
                        ipv9
                        ds13 of s4 { DEFAULT ->
                 (# s4,
                    (GHC.Tuple.(),
                     case ipv3 of wild3 { (,) a2 s'1 ->
                     s'1 }) #) } } } } } } } } } } } } }) -}
bf2892d3bb44dee7d5bdd91d100d8434
  setFullscreenSupported2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "_NET_WM_STATE_FULLSCREEN"#) -}
0cf593cf6ad4ba597e08d209599f72c2
  setFullscreenSupported3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_NET_SUPPORTED"#) -}
3ffb7ba2c9cc2bd49718d9119982a7c4
  toggleFloat :: XMonad.Core.X ()
  {- Arity: 3,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLSSSLLLSSSLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMonad.My.Helpers.toggleFloat1
                  `cast`
                (Trans
                     (<XMonad.Core.XConf>_R
                      ->_R Trans
                               (<XMonad.Core.XState>_R
                                ->_R Sym (GHC.Types.N:IO[0] <((), XMonad.Core.XState)>_R))
                               (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                         <XMonad.Core.XState>_N <GHC.Types.IO>_R <()>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <XMonad.Core.XConf>_R
                                    <Control.Monad.Trans.State.Lazy.StateT
                                       XMonad.Core.XState GHC.Types.IO>_R
                                    <()>_N))
                          (Sym (XMonad.Core.N:X[0]) <()>_N))) -}
f84259d27f34ef4cf9beecfb46edd977
  toggleFloat1 ::
    XMonad.Core.XConf
    -> XMonad.Core.XState
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), XMonad.Core.XState) #)
  {- Arity: 3,
     Strictness: <L,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S(SLSSSLLLSSSLS),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: XMonad.Core.XConf)
                   (w1 :: XMonad.Core.XState)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { XMonad.Core.XState ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 XMonad.My.Helpers.$wtoggleFloat
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

